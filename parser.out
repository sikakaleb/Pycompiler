Grammar:

Rule 0     S' -> statement
Rule 1     statement -> prog
Rule 2     prog -> listeInstructions
Rule 3     listeInstructions -> listeInstructions instruction
Rule 4     listeInstructions -> instruction
Rule 5     instruction -> suite_sinosi
Rule 6     instruction -> boucle
Rule 7     instruction -> condition
Rule 8     instruction -> affectation
Rule 9     instruction -> declaration
Rule 10    instruction -> ecrire
Rule 11    ecrire -> ECRIRE ( expr ) ;
Rule 12    factor -> BOOLEEN_LITERAL
Rule 13    factor -> BOOLEEN
Rule 14    factor -> ( expr )
Rule 15    factor -> IDENTIFIANT
Rule 16    factor -> ENTIER
Rule 17    factor -> LIRE ( )
Rule 18    type -> BOOLEEN
Rule 19    type -> ENT
Rule 20    declaration -> type IDENTIFIANT = expr ;
Rule 21    affectation -> IDENTIFIANT = expr ;
Rule 22    condition -> SI ( expr ) { listeInstructions } suite_sinosi
Rule 23    suite_sinosi -> <empty>
Rule 24    suite_sinosi -> SINON SI ( expr ) { listeInstructions } suite_sinosi
Rule 25    suite_sinosi -> SINON { listeInstructions }
Rule 26    boucle -> TANTQUE ( expr ) { listeInstructions }
Rule 27    expr -> MINUS expr  [precedence=nonassoc, level=2]
Rule 28    expr -> NON expr  [precedence=nonassoc, level=1]
Rule 29    expr -> NON IDENTIFIANT
Rule 30    expr -> NON BOOLEEN_LITERAL
Rule 31    expr -> term
Rule 32    expr -> expr DIFF expr  [precedence=nonassoc, level=7]
Rule 33    expr -> expr EGAL expr  [precedence=nonassoc, level=7]
Rule 34    expr -> expr COMPARATEUR expr  [precedence=nonassoc, level=7]
Rule 35    expr -> expr SUP expr  [precedence=nonassoc, level=7]
Rule 36    expr -> expr INF expr  [precedence=nonassoc, level=7]
Rule 37    expr -> expr OU expr  [precedence=left, level=6]
Rule 38    expr -> expr ET expr  [precedence=left, level=5]
Rule 39    expr -> expr MINUS term  [precedence=left, level=4]
Rule 40    expr -> expr PLUS term  [precedence=left, level=4]
Rule 41    term -> factor
Rule 42    term -> factor MODULO factor  [precedence=left, level=3]
Rule 43    term -> term MODULO factor  [precedence=left, level=3]
Rule 44    term -> term DIV factor  [precedence=left, level=3]
Rule 45    term -> term MULT factor  [precedence=left, level=3]

Unused terminals:

    SUP_EGAL
    ALORS
    UMINUS
    INF_EGAL

Terminals, with rules where they appear:

(                    : 11 14 17 22 24 26
)                    : 11 14 17 22 24 26
;                    : 11 20 21
=                    : 20 21
ALORS                : 
BOOLEEN              : 13 18
BOOLEEN_LITERAL      : 12 30
COMPARATEUR          : 34
DIFF                 : 32
DIV                  : 44
ECRIRE               : 11
EGAL                 : 33
ENT                  : 19
ENTIER               : 16
ET                   : 38
IDENTIFIANT          : 15 20 21 29
INF                  : 36
INF_EGAL             : 
LIRE                 : 17
MINUS                : 27 39
MODULO               : 42 43
MULT                 : 45
NON                  : 28 29 30
OU                   : 37
PLUS                 : 40
SI                   : 22 24
SINON                : 24 25
SUP                  : 35
SUP_EGAL             : 
TANTQUE              : 26
UMINUS               : 
error                : 
{                    : 22 24 25 26
}                    : 22 24 25 26

Nonterminals, with rules where they appear:

affectation          : 8
boucle               : 6
condition            : 7
declaration          : 9
ecrire               : 10
expr                 : 11 14 20 21 22 24 26 27 28 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 40
factor               : 41 42 42 43 44 45
instruction          : 3 4
listeInstructions    : 2 3 22 24 25 26
prog                 : 1
statement            : 0
suite_sinosi         : 5 22 24
term                 : 31 39 40 43 44 45
type                 : 20


state 0

    (0) S' -> . statement
    (1) statement -> . prog
    (2) prog -> . listeInstructions
    (3) listeInstructions -> . listeInstructions instruction
    (4) listeInstructions -> . instruction
    (5) instruction -> . suite_sinosi
    (6) instruction -> . boucle
    (7) instruction -> . condition
    (8) instruction -> . affectation
    (9) instruction -> . declaration
    (10) instruction -> . ecrire
    (23) suite_sinosi -> .
    (24) suite_sinosi -> . SINON SI ( expr ) { listeInstructions } suite_sinosi
    (25) suite_sinosi -> . SINON { listeInstructions }
    (26) boucle -> . TANTQUE ( expr ) { listeInstructions }
    (22) condition -> . SI ( expr ) { listeInstructions } suite_sinosi
    (21) affectation -> . IDENTIFIANT = expr ;
    (20) declaration -> . type IDENTIFIANT = expr ;
    (11) ecrire -> . ECRIRE ( expr ) ;
    (18) type -> . BOOLEEN
    (19) type -> . ENT
  ! shift/reduce conflict for SINON resolved as shift
  ! shift/reduce conflict for TANTQUE resolved as shift
  ! shift/reduce conflict for SI resolved as shift
  ! shift/reduce conflict for IDENTIFIANT resolved as shift
  ! shift/reduce conflict for ECRIRE resolved as shift
  ! shift/reduce conflict for BOOLEEN resolved as shift
  ! shift/reduce conflict for ENT resolved as shift
    $end            reduce using rule 23 (suite_sinosi -> .)
    SINON           shift and go to state 11
    TANTQUE         shift and go to state 13
    SI              shift and go to state 12
    IDENTIFIANT     shift and go to state 14
    ECRIRE          shift and go to state 16
    BOOLEEN         shift and go to state 17
    ENT             shift and go to state 18

    statement                      shift and go to state 1
    prog                           shift and go to state 2
    listeInstructions              shift and go to state 3
    instruction                    shift and go to state 4
    suite_sinosi                   shift and go to state 5
    boucle                         shift and go to state 6
    condition                      shift and go to state 7
    affectation                    shift and go to state 8
    declaration                    shift and go to state 9
    ecrire                         shift and go to state 10
    type                           shift and go to state 15

state 1

    (0) S' -> statement .


state 2

    (1) statement -> prog .
    $end            reduce using rule 1 (statement -> prog .)


state 3

    (2) prog -> listeInstructions .
    (3) listeInstructions -> listeInstructions . instruction
    (5) instruction -> . suite_sinosi
    (6) instruction -> . boucle
    (7) instruction -> . condition
    (8) instruction -> . affectation
    (9) instruction -> . declaration
    (10) instruction -> . ecrire
    (23) suite_sinosi -> .
    (24) suite_sinosi -> . SINON SI ( expr ) { listeInstructions } suite_sinosi
    (25) suite_sinosi -> . SINON { listeInstructions }
    (26) boucle -> . TANTQUE ( expr ) { listeInstructions }
    (22) condition -> . SI ( expr ) { listeInstructions } suite_sinosi
    (21) affectation -> . IDENTIFIANT = expr ;
    (20) declaration -> . type IDENTIFIANT = expr ;
    (11) ecrire -> . ECRIRE ( expr ) ;
    (18) type -> . BOOLEEN
    (19) type -> . ENT
  ! reduce/reduce conflict for $end resolved using rule 2 (prog -> listeInstructions .)
  ! shift/reduce conflict for SINON resolved as shift
  ! shift/reduce conflict for TANTQUE resolved as shift
  ! shift/reduce conflict for SI resolved as shift
  ! shift/reduce conflict for IDENTIFIANT resolved as shift
  ! shift/reduce conflict for ECRIRE resolved as shift
  ! shift/reduce conflict for BOOLEEN resolved as shift
  ! shift/reduce conflict for ENT resolved as shift
    $end            reduce using rule 2 (prog -> listeInstructions .)
    SINON           shift and go to state 11
    TANTQUE         shift and go to state 13
    SI              shift and go to state 12
    IDENTIFIANT     shift and go to state 14
    ECRIRE          shift and go to state 16
    BOOLEEN         shift and go to state 17
    ENT             shift and go to state 18

    instruction                    shift and go to state 19
    suite_sinosi                   shift and go to state 5
    boucle                         shift and go to state 6
    condition                      shift and go to state 7
    affectation                    shift and go to state 8
    declaration                    shift and go to state 9
    ecrire                         shift and go to state 10
    type                           shift and go to state 15

state 4

    (4) listeInstructions -> instruction .
    SINON           reduce using rule 4 (listeInstructions -> instruction .)
    TANTQUE         reduce using rule 4 (listeInstructions -> instruction .)
    SI              reduce using rule 4 (listeInstructions -> instruction .)
    IDENTIFIANT     reduce using rule 4 (listeInstructions -> instruction .)
    ECRIRE          reduce using rule 4 (listeInstructions -> instruction .)
    BOOLEEN         reduce using rule 4 (listeInstructions -> instruction .)
    ENT             reduce using rule 4 (listeInstructions -> instruction .)
    $end            reduce using rule 4 (listeInstructions -> instruction .)
    }               reduce using rule 4 (listeInstructions -> instruction .)


state 5

    (5) instruction -> suite_sinosi .
    SINON           reduce using rule 5 (instruction -> suite_sinosi .)
    TANTQUE         reduce using rule 5 (instruction -> suite_sinosi .)
    SI              reduce using rule 5 (instruction -> suite_sinosi .)
    IDENTIFIANT     reduce using rule 5 (instruction -> suite_sinosi .)
    ECRIRE          reduce using rule 5 (instruction -> suite_sinosi .)
    BOOLEEN         reduce using rule 5 (instruction -> suite_sinosi .)
    ENT             reduce using rule 5 (instruction -> suite_sinosi .)
    $end            reduce using rule 5 (instruction -> suite_sinosi .)
    }               reduce using rule 5 (instruction -> suite_sinosi .)


state 6

    (6) instruction -> boucle .
    SINON           reduce using rule 6 (instruction -> boucle .)
    TANTQUE         reduce using rule 6 (instruction -> boucle .)
    SI              reduce using rule 6 (instruction -> boucle .)
    IDENTIFIANT     reduce using rule 6 (instruction -> boucle .)
    ECRIRE          reduce using rule 6 (instruction -> boucle .)
    BOOLEEN         reduce using rule 6 (instruction -> boucle .)
    ENT             reduce using rule 6 (instruction -> boucle .)
    $end            reduce using rule 6 (instruction -> boucle .)
    }               reduce using rule 6 (instruction -> boucle .)


state 7

    (7) instruction -> condition .
    SINON           reduce using rule 7 (instruction -> condition .)
    TANTQUE         reduce using rule 7 (instruction -> condition .)
    SI              reduce using rule 7 (instruction -> condition .)
    IDENTIFIANT     reduce using rule 7 (instruction -> condition .)
    ECRIRE          reduce using rule 7 (instruction -> condition .)
    BOOLEEN         reduce using rule 7 (instruction -> condition .)
    ENT             reduce using rule 7 (instruction -> condition .)
    $end            reduce using rule 7 (instruction -> condition .)
    }               reduce using rule 7 (instruction -> condition .)


state 8

    (8) instruction -> affectation .
    SINON           reduce using rule 8 (instruction -> affectation .)
    TANTQUE         reduce using rule 8 (instruction -> affectation .)
    SI              reduce using rule 8 (instruction -> affectation .)
    IDENTIFIANT     reduce using rule 8 (instruction -> affectation .)
    ECRIRE          reduce using rule 8 (instruction -> affectation .)
    BOOLEEN         reduce using rule 8 (instruction -> affectation .)
    ENT             reduce using rule 8 (instruction -> affectation .)
    $end            reduce using rule 8 (instruction -> affectation .)
    }               reduce using rule 8 (instruction -> affectation .)


state 9

    (9) instruction -> declaration .
    SINON           reduce using rule 9 (instruction -> declaration .)
    TANTQUE         reduce using rule 9 (instruction -> declaration .)
    SI              reduce using rule 9 (instruction -> declaration .)
    IDENTIFIANT     reduce using rule 9 (instruction -> declaration .)
    ECRIRE          reduce using rule 9 (instruction -> declaration .)
    BOOLEEN         reduce using rule 9 (instruction -> declaration .)
    ENT             reduce using rule 9 (instruction -> declaration .)
    $end            reduce using rule 9 (instruction -> declaration .)
    }               reduce using rule 9 (instruction -> declaration .)


state 10

    (10) instruction -> ecrire .
    SINON           reduce using rule 10 (instruction -> ecrire .)
    TANTQUE         reduce using rule 10 (instruction -> ecrire .)
    SI              reduce using rule 10 (instruction -> ecrire .)
    IDENTIFIANT     reduce using rule 10 (instruction -> ecrire .)
    ECRIRE          reduce using rule 10 (instruction -> ecrire .)
    BOOLEEN         reduce using rule 10 (instruction -> ecrire .)
    ENT             reduce using rule 10 (instruction -> ecrire .)
    $end            reduce using rule 10 (instruction -> ecrire .)
    }               reduce using rule 10 (instruction -> ecrire .)


state 11

    (24) suite_sinosi -> SINON . SI ( expr ) { listeInstructions } suite_sinosi
    (25) suite_sinosi -> SINON . { listeInstructions }
    SI              shift and go to state 20
    {               shift and go to state 21


state 12

    (22) condition -> SI . ( expr ) { listeInstructions } suite_sinosi
    (               shift and go to state 22


state 13

    (26) boucle -> TANTQUE . ( expr ) { listeInstructions }
    (               shift and go to state 23


state 14

    (21) affectation -> IDENTIFIANT . = expr ;
    =               shift and go to state 24


state 15

    (20) declaration -> type . IDENTIFIANT = expr ;
    IDENTIFIANT     shift and go to state 25


state 16

    (11) ecrire -> ECRIRE . ( expr ) ;
    (               shift and go to state 26


state 17

    (18) type -> BOOLEEN .
    IDENTIFIANT     reduce using rule 18 (type -> BOOLEEN .)


state 18

    (19) type -> ENT .
    IDENTIFIANT     reduce using rule 19 (type -> ENT .)


state 19

    (3) listeInstructions -> listeInstructions instruction .
    SINON           reduce using rule 3 (listeInstructions -> listeInstructions instruction .)
    TANTQUE         reduce using rule 3 (listeInstructions -> listeInstructions instruction .)
    SI              reduce using rule 3 (listeInstructions -> listeInstructions instruction .)
    IDENTIFIANT     reduce using rule 3 (listeInstructions -> listeInstructions instruction .)
    ECRIRE          reduce using rule 3 (listeInstructions -> listeInstructions instruction .)
    BOOLEEN         reduce using rule 3 (listeInstructions -> listeInstructions instruction .)
    ENT             reduce using rule 3 (listeInstructions -> listeInstructions instruction .)
    $end            reduce using rule 3 (listeInstructions -> listeInstructions instruction .)
    }               reduce using rule 3 (listeInstructions -> listeInstructions instruction .)


state 20

    (24) suite_sinosi -> SINON SI . ( expr ) { listeInstructions } suite_sinosi
    (               shift and go to state 27


state 21

    (25) suite_sinosi -> SINON { . listeInstructions }
    (3) listeInstructions -> . listeInstructions instruction
    (4) listeInstructions -> . instruction
    (5) instruction -> . suite_sinosi
    (6) instruction -> . boucle
    (7) instruction -> . condition
    (8) instruction -> . affectation
    (9) instruction -> . declaration
    (10) instruction -> . ecrire
    (23) suite_sinosi -> .
    (24) suite_sinosi -> . SINON SI ( expr ) { listeInstructions } suite_sinosi
    (25) suite_sinosi -> . SINON { listeInstructions }
    (26) boucle -> . TANTQUE ( expr ) { listeInstructions }
    (22) condition -> . SI ( expr ) { listeInstructions } suite_sinosi
    (21) affectation -> . IDENTIFIANT = expr ;
    (20) declaration -> . type IDENTIFIANT = expr ;
    (11) ecrire -> . ECRIRE ( expr ) ;
    (18) type -> . BOOLEEN
    (19) type -> . ENT
  ! shift/reduce conflict for SINON resolved as shift
  ! shift/reduce conflict for TANTQUE resolved as shift
  ! shift/reduce conflict for SI resolved as shift
  ! shift/reduce conflict for IDENTIFIANT resolved as shift
  ! shift/reduce conflict for ECRIRE resolved as shift
  ! shift/reduce conflict for BOOLEEN resolved as shift
  ! shift/reduce conflict for ENT resolved as shift
    }               reduce using rule 23 (suite_sinosi -> .)
    SINON           shift and go to state 11
    TANTQUE         shift and go to state 13
    SI              shift and go to state 12
    IDENTIFIANT     shift and go to state 14
    ECRIRE          shift and go to state 16
    BOOLEEN         shift and go to state 17
    ENT             shift and go to state 18

    listeInstructions              shift and go to state 28
    instruction                    shift and go to state 4
    suite_sinosi                   shift and go to state 5
    boucle                         shift and go to state 6
    condition                      shift and go to state 7
    affectation                    shift and go to state 8
    declaration                    shift and go to state 9
    ecrire                         shift and go to state 10
    type                           shift and go to state 15

state 22

    (22) condition -> SI ( . expr ) { listeInstructions } suite_sinosi
    (27) expr -> . MINUS expr
    (28) expr -> . NON expr
    (29) expr -> . NON IDENTIFIANT
    (30) expr -> . NON BOOLEEN_LITERAL
    (31) expr -> . term
    (32) expr -> . expr DIFF expr
    (33) expr -> . expr EGAL expr
    (34) expr -> . expr COMPARATEUR expr
    (35) expr -> . expr SUP expr
    (36) expr -> . expr INF expr
    (37) expr -> . expr OU expr
    (38) expr -> . expr ET expr
    (39) expr -> . expr MINUS term
    (40) expr -> . expr PLUS term
    (41) term -> . factor
    (42) term -> . factor MODULO factor
    (43) term -> . term MODULO factor
    (44) term -> . term DIV factor
    (45) term -> . term MULT factor
    (12) factor -> . BOOLEEN_LITERAL
    (13) factor -> . BOOLEEN
    (14) factor -> . ( expr )
    (15) factor -> . IDENTIFIANT
    (16) factor -> . ENTIER
    (17) factor -> . LIRE ( )
    MINUS           shift and go to state 31
    NON             shift and go to state 32
    BOOLEEN_LITERAL shift and go to state 34
    BOOLEEN         shift and go to state 37
    (               shift and go to state 29
    IDENTIFIANT     shift and go to state 33
    ENTIER          shift and go to state 38
    LIRE            shift and go to state 39

    expr                           shift and go to state 30
    term                           shift and go to state 35
    factor                         shift and go to state 36

state 23

    (26) boucle -> TANTQUE ( . expr ) { listeInstructions }
    (27) expr -> . MINUS expr
    (28) expr -> . NON expr
    (29) expr -> . NON IDENTIFIANT
    (30) expr -> . NON BOOLEEN_LITERAL
    (31) expr -> . term
    (32) expr -> . expr DIFF expr
    (33) expr -> . expr EGAL expr
    (34) expr -> . expr COMPARATEUR expr
    (35) expr -> . expr SUP expr
    (36) expr -> . expr INF expr
    (37) expr -> . expr OU expr
    (38) expr -> . expr ET expr
    (39) expr -> . expr MINUS term
    (40) expr -> . expr PLUS term
    (41) term -> . factor
    (42) term -> . factor MODULO factor
    (43) term -> . term MODULO factor
    (44) term -> . term DIV factor
    (45) term -> . term MULT factor
    (12) factor -> . BOOLEEN_LITERAL
    (13) factor -> . BOOLEEN
    (14) factor -> . ( expr )
    (15) factor -> . IDENTIFIANT
    (16) factor -> . ENTIER
    (17) factor -> . LIRE ( )
    MINUS           shift and go to state 31
    NON             shift and go to state 32
    BOOLEEN_LITERAL shift and go to state 34
    BOOLEEN         shift and go to state 37
    (               shift and go to state 29
    IDENTIFIANT     shift and go to state 33
    ENTIER          shift and go to state 38
    LIRE            shift and go to state 39

    expr                           shift and go to state 40
    term                           shift and go to state 35
    factor                         shift and go to state 36

state 24

    (21) affectation -> IDENTIFIANT = . expr ;
    (27) expr -> . MINUS expr
    (28) expr -> . NON expr
    (29) expr -> . NON IDENTIFIANT
    (30) expr -> . NON BOOLEEN_LITERAL
    (31) expr -> . term
    (32) expr -> . expr DIFF expr
    (33) expr -> . expr EGAL expr
    (34) expr -> . expr COMPARATEUR expr
    (35) expr -> . expr SUP expr
    (36) expr -> . expr INF expr
    (37) expr -> . expr OU expr
    (38) expr -> . expr ET expr
    (39) expr -> . expr MINUS term
    (40) expr -> . expr PLUS term
    (41) term -> . factor
    (42) term -> . factor MODULO factor
    (43) term -> . term MODULO factor
    (44) term -> . term DIV factor
    (45) term -> . term MULT factor
    (12) factor -> . BOOLEEN_LITERAL
    (13) factor -> . BOOLEEN
    (14) factor -> . ( expr )
    (15) factor -> . IDENTIFIANT
    (16) factor -> . ENTIER
    (17) factor -> . LIRE ( )
    MINUS           shift and go to state 31
    NON             shift and go to state 32
    BOOLEEN_LITERAL shift and go to state 34
    BOOLEEN         shift and go to state 37
    (               shift and go to state 29
    IDENTIFIANT     shift and go to state 33
    ENTIER          shift and go to state 38
    LIRE            shift and go to state 39

    expr                           shift and go to state 41
    term                           shift and go to state 35
    factor                         shift and go to state 36

state 25

    (20) declaration -> type IDENTIFIANT . = expr ;
    =               shift and go to state 42


state 26

    (11) ecrire -> ECRIRE ( . expr ) ;
    (27) expr -> . MINUS expr
    (28) expr -> . NON expr
    (29) expr -> . NON IDENTIFIANT
    (30) expr -> . NON BOOLEEN_LITERAL
    (31) expr -> . term
    (32) expr -> . expr DIFF expr
    (33) expr -> . expr EGAL expr
    (34) expr -> . expr COMPARATEUR expr
    (35) expr -> . expr SUP expr
    (36) expr -> . expr INF expr
    (37) expr -> . expr OU expr
    (38) expr -> . expr ET expr
    (39) expr -> . expr MINUS term
    (40) expr -> . expr PLUS term
    (41) term -> . factor
    (42) term -> . factor MODULO factor
    (43) term -> . term MODULO factor
    (44) term -> . term DIV factor
    (45) term -> . term MULT factor
    (12) factor -> . BOOLEEN_LITERAL
    (13) factor -> . BOOLEEN
    (14) factor -> . ( expr )
    (15) factor -> . IDENTIFIANT
    (16) factor -> . ENTIER
    (17) factor -> . LIRE ( )
    MINUS           shift and go to state 31
    NON             shift and go to state 32
    BOOLEEN_LITERAL shift and go to state 34
    BOOLEEN         shift and go to state 37
    (               shift and go to state 29
    IDENTIFIANT     shift and go to state 33
    ENTIER          shift and go to state 38
    LIRE            shift and go to state 39

    expr                           shift and go to state 43
    term                           shift and go to state 35
    factor                         shift and go to state 36

state 27

    (24) suite_sinosi -> SINON SI ( . expr ) { listeInstructions } suite_sinosi
    (27) expr -> . MINUS expr
    (28) expr -> . NON expr
    (29) expr -> . NON IDENTIFIANT
    (30) expr -> . NON BOOLEEN_LITERAL
    (31) expr -> . term
    (32) expr -> . expr DIFF expr
    (33) expr -> . expr EGAL expr
    (34) expr -> . expr COMPARATEUR expr
    (35) expr -> . expr SUP expr
    (36) expr -> . expr INF expr
    (37) expr -> . expr OU expr
    (38) expr -> . expr ET expr
    (39) expr -> . expr MINUS term
    (40) expr -> . expr PLUS term
    (41) term -> . factor
    (42) term -> . factor MODULO factor
    (43) term -> . term MODULO factor
    (44) term -> . term DIV factor
    (45) term -> . term MULT factor
    (12) factor -> . BOOLEEN_LITERAL
    (13) factor -> . BOOLEEN
    (14) factor -> . ( expr )
    (15) factor -> . IDENTIFIANT
    (16) factor -> . ENTIER
    (17) factor -> . LIRE ( )
    MINUS           shift and go to state 31
    NON             shift and go to state 32
    BOOLEEN_LITERAL shift and go to state 34
    BOOLEEN         shift and go to state 37
    (               shift and go to state 29
    IDENTIFIANT     shift and go to state 33
    ENTIER          shift and go to state 38
    LIRE            shift and go to state 39

    expr                           shift and go to state 44
    term                           shift and go to state 35
    factor                         shift and go to state 36

state 28

    (25) suite_sinosi -> SINON { listeInstructions . }
    (3) listeInstructions -> listeInstructions . instruction
    (5) instruction -> . suite_sinosi
    (6) instruction -> . boucle
    (7) instruction -> . condition
    (8) instruction -> . affectation
    (9) instruction -> . declaration
    (10) instruction -> . ecrire
    (23) suite_sinosi -> .
    (24) suite_sinosi -> . SINON SI ( expr ) { listeInstructions } suite_sinosi
    (25) suite_sinosi -> . SINON { listeInstructions }
    (26) boucle -> . TANTQUE ( expr ) { listeInstructions }
    (22) condition -> . SI ( expr ) { listeInstructions } suite_sinosi
    (21) affectation -> . IDENTIFIANT = expr ;
    (20) declaration -> . type IDENTIFIANT = expr ;
    (11) ecrire -> . ECRIRE ( expr ) ;
    (18) type -> . BOOLEEN
    (19) type -> . ENT
  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for SINON resolved as shift
  ! shift/reduce conflict for TANTQUE resolved as shift
  ! shift/reduce conflict for SI resolved as shift
  ! shift/reduce conflict for IDENTIFIANT resolved as shift
  ! shift/reduce conflict for ECRIRE resolved as shift
  ! shift/reduce conflict for BOOLEEN resolved as shift
  ! shift/reduce conflict for ENT resolved as shift
    }               shift and go to state 45
    SINON           shift and go to state 11
    TANTQUE         shift and go to state 13
    SI              shift and go to state 12
    IDENTIFIANT     shift and go to state 14
    ECRIRE          shift and go to state 16
    BOOLEEN         shift and go to state 17
    ENT             shift and go to state 18

    instruction                    shift and go to state 19
    suite_sinosi                   shift and go to state 5
    boucle                         shift and go to state 6
    condition                      shift and go to state 7
    affectation                    shift and go to state 8
    declaration                    shift and go to state 9
    ecrire                         shift and go to state 10
    type                           shift and go to state 15

state 29

    (14) factor -> ( . expr )
    (27) expr -> . MINUS expr
    (28) expr -> . NON expr
    (29) expr -> . NON IDENTIFIANT
    (30) expr -> . NON BOOLEEN_LITERAL
    (31) expr -> . term
    (32) expr -> . expr DIFF expr
    (33) expr -> . expr EGAL expr
    (34) expr -> . expr COMPARATEUR expr
    (35) expr -> . expr SUP expr
    (36) expr -> . expr INF expr
    (37) expr -> . expr OU expr
    (38) expr -> . expr ET expr
    (39) expr -> . expr MINUS term
    (40) expr -> . expr PLUS term
    (41) term -> . factor
    (42) term -> . factor MODULO factor
    (43) term -> . term MODULO factor
    (44) term -> . term DIV factor
    (45) term -> . term MULT factor
    (12) factor -> . BOOLEEN_LITERAL
    (13) factor -> . BOOLEEN
    (14) factor -> . ( expr )
    (15) factor -> . IDENTIFIANT
    (16) factor -> . ENTIER
    (17) factor -> . LIRE ( )
    MINUS           shift and go to state 31
    NON             shift and go to state 32
    BOOLEEN_LITERAL shift and go to state 34
    BOOLEEN         shift and go to state 37
    (               shift and go to state 29
    IDENTIFIANT     shift and go to state 33
    ENTIER          shift and go to state 38
    LIRE            shift and go to state 39

    expr                           shift and go to state 46
    term                           shift and go to state 35
    factor                         shift and go to state 36

state 30

    (22) condition -> SI ( expr . ) { listeInstructions } suite_sinosi
    (32) expr -> expr . DIFF expr
    (33) expr -> expr . EGAL expr
    (34) expr -> expr . COMPARATEUR expr
    (35) expr -> expr . SUP expr
    (36) expr -> expr . INF expr
    (37) expr -> expr . OU expr
    (38) expr -> expr . ET expr
    (39) expr -> expr . MINUS term
    (40) expr -> expr . PLUS term
    )               shift and go to state 47
    DIFF            shift and go to state 48
    EGAL            shift and go to state 49
    COMPARATEUR     shift and go to state 50
    SUP             shift and go to state 51
    INF             shift and go to state 52
    OU              shift and go to state 53
    ET              shift and go to state 54
    MINUS           shift and go to state 55
    PLUS            shift and go to state 56


state 31

    (27) expr -> MINUS . expr
    (27) expr -> . MINUS expr
    (28) expr -> . NON expr
    (29) expr -> . NON IDENTIFIANT
    (30) expr -> . NON BOOLEEN_LITERAL
    (31) expr -> . term
    (32) expr -> . expr DIFF expr
    (33) expr -> . expr EGAL expr
    (34) expr -> . expr COMPARATEUR expr
    (35) expr -> . expr SUP expr
    (36) expr -> . expr INF expr
    (37) expr -> . expr OU expr
    (38) expr -> . expr ET expr
    (39) expr -> . expr MINUS term
    (40) expr -> . expr PLUS term
    (41) term -> . factor
    (42) term -> . factor MODULO factor
    (43) term -> . term MODULO factor
    (44) term -> . term DIV factor
    (45) term -> . term MULT factor
    (12) factor -> . BOOLEEN_LITERAL
    (13) factor -> . BOOLEEN
    (14) factor -> . ( expr )
    (15) factor -> . IDENTIFIANT
    (16) factor -> . ENTIER
    (17) factor -> . LIRE ( )
    MINUS           shift and go to state 31
    NON             shift and go to state 32
    BOOLEEN_LITERAL shift and go to state 34
    BOOLEEN         shift and go to state 37
    (               shift and go to state 29
    IDENTIFIANT     shift and go to state 33
    ENTIER          shift and go to state 38
    LIRE            shift and go to state 39

    expr                           shift and go to state 57
    term                           shift and go to state 35
    factor                         shift and go to state 36

state 32

    (28) expr -> NON . expr
    (29) expr -> NON . IDENTIFIANT
    (30) expr -> NON . BOOLEEN_LITERAL
    (27) expr -> . MINUS expr
    (28) expr -> . NON expr
    (29) expr -> . NON IDENTIFIANT
    (30) expr -> . NON BOOLEEN_LITERAL
    (31) expr -> . term
    (32) expr -> . expr DIFF expr
    (33) expr -> . expr EGAL expr
    (34) expr -> . expr COMPARATEUR expr
    (35) expr -> . expr SUP expr
    (36) expr -> . expr INF expr
    (37) expr -> . expr OU expr
    (38) expr -> . expr ET expr
    (39) expr -> . expr MINUS term
    (40) expr -> . expr PLUS term
    (41) term -> . factor
    (42) term -> . factor MODULO factor
    (43) term -> . term MODULO factor
    (44) term -> . term DIV factor
    (45) term -> . term MULT factor
    (12) factor -> . BOOLEEN_LITERAL
    (13) factor -> . BOOLEEN
    (14) factor -> . ( expr )
    (15) factor -> . IDENTIFIANT
    (16) factor -> . ENTIER
    (17) factor -> . LIRE ( )
    IDENTIFIANT     shift and go to state 59
    BOOLEEN_LITERAL shift and go to state 60
    MINUS           shift and go to state 31
    NON             shift and go to state 32
    BOOLEEN         shift and go to state 37
    (               shift and go to state 29
    ENTIER          shift and go to state 38
    LIRE            shift and go to state 39

    expr                           shift and go to state 58
    term                           shift and go to state 35
    factor                         shift and go to state 36

state 33

    (15) factor -> IDENTIFIANT .
    MODULO          reduce using rule 15 (factor -> IDENTIFIANT .)
    DIV             reduce using rule 15 (factor -> IDENTIFIANT .)
    MULT            reduce using rule 15 (factor -> IDENTIFIANT .)
    )               reduce using rule 15 (factor -> IDENTIFIANT .)
    DIFF            reduce using rule 15 (factor -> IDENTIFIANT .)
    EGAL            reduce using rule 15 (factor -> IDENTIFIANT .)
    COMPARATEUR     reduce using rule 15 (factor -> IDENTIFIANT .)
    SUP             reduce using rule 15 (factor -> IDENTIFIANT .)
    INF             reduce using rule 15 (factor -> IDENTIFIANT .)
    OU              reduce using rule 15 (factor -> IDENTIFIANT .)
    ET              reduce using rule 15 (factor -> IDENTIFIANT .)
    MINUS           reduce using rule 15 (factor -> IDENTIFIANT .)
    PLUS            reduce using rule 15 (factor -> IDENTIFIANT .)
    ;               reduce using rule 15 (factor -> IDENTIFIANT .)


state 34

    (12) factor -> BOOLEEN_LITERAL .
    MODULO          reduce using rule 12 (factor -> BOOLEEN_LITERAL .)
    DIV             reduce using rule 12 (factor -> BOOLEEN_LITERAL .)
    MULT            reduce using rule 12 (factor -> BOOLEEN_LITERAL .)
    )               reduce using rule 12 (factor -> BOOLEEN_LITERAL .)
    DIFF            reduce using rule 12 (factor -> BOOLEEN_LITERAL .)
    EGAL            reduce using rule 12 (factor -> BOOLEEN_LITERAL .)
    COMPARATEUR     reduce using rule 12 (factor -> BOOLEEN_LITERAL .)
    SUP             reduce using rule 12 (factor -> BOOLEEN_LITERAL .)
    INF             reduce using rule 12 (factor -> BOOLEEN_LITERAL .)
    OU              reduce using rule 12 (factor -> BOOLEEN_LITERAL .)
    ET              reduce using rule 12 (factor -> BOOLEEN_LITERAL .)
    MINUS           reduce using rule 12 (factor -> BOOLEEN_LITERAL .)
    PLUS            reduce using rule 12 (factor -> BOOLEEN_LITERAL .)
    ;               reduce using rule 12 (factor -> BOOLEEN_LITERAL .)


state 35

    (31) expr -> term .
    (43) term -> term . MODULO factor
    (44) term -> term . DIV factor
    (45) term -> term . MULT factor
    )               reduce using rule 31 (expr -> term .)
    DIFF            reduce using rule 31 (expr -> term .)
    EGAL            reduce using rule 31 (expr -> term .)
    COMPARATEUR     reduce using rule 31 (expr -> term .)
    SUP             reduce using rule 31 (expr -> term .)
    INF             reduce using rule 31 (expr -> term .)
    OU              reduce using rule 31 (expr -> term .)
    ET              reduce using rule 31 (expr -> term .)
    MINUS           reduce using rule 31 (expr -> term .)
    PLUS            reduce using rule 31 (expr -> term .)
    ;               reduce using rule 31 (expr -> term .)
    MODULO          shift and go to state 61
    DIV             shift and go to state 62
    MULT            shift and go to state 63


state 36

    (41) term -> factor .
    (42) term -> factor . MODULO factor
  ! shift/reduce conflict for MODULO resolved as shift
    DIV             reduce using rule 41 (term -> factor .)
    MULT            reduce using rule 41 (term -> factor .)
    )               reduce using rule 41 (term -> factor .)
    DIFF            reduce using rule 41 (term -> factor .)
    EGAL            reduce using rule 41 (term -> factor .)
    COMPARATEUR     reduce using rule 41 (term -> factor .)
    SUP             reduce using rule 41 (term -> factor .)
    INF             reduce using rule 41 (term -> factor .)
    OU              reduce using rule 41 (term -> factor .)
    ET              reduce using rule 41 (term -> factor .)
    MINUS           reduce using rule 41 (term -> factor .)
    PLUS            reduce using rule 41 (term -> factor .)
    ;               reduce using rule 41 (term -> factor .)
    MODULO          shift and go to state 64


state 37

    (13) factor -> BOOLEEN .
    MODULO          reduce using rule 13 (factor -> BOOLEEN .)
    DIV             reduce using rule 13 (factor -> BOOLEEN .)
    MULT            reduce using rule 13 (factor -> BOOLEEN .)
    )               reduce using rule 13 (factor -> BOOLEEN .)
    DIFF            reduce using rule 13 (factor -> BOOLEEN .)
    EGAL            reduce using rule 13 (factor -> BOOLEEN .)
    COMPARATEUR     reduce using rule 13 (factor -> BOOLEEN .)
    SUP             reduce using rule 13 (factor -> BOOLEEN .)
    INF             reduce using rule 13 (factor -> BOOLEEN .)
    OU              reduce using rule 13 (factor -> BOOLEEN .)
    ET              reduce using rule 13 (factor -> BOOLEEN .)
    MINUS           reduce using rule 13 (factor -> BOOLEEN .)
    PLUS            reduce using rule 13 (factor -> BOOLEEN .)
    ;               reduce using rule 13 (factor -> BOOLEEN .)


state 38

    (16) factor -> ENTIER .
    MODULO          reduce using rule 16 (factor -> ENTIER .)
    DIV             reduce using rule 16 (factor -> ENTIER .)
    MULT            reduce using rule 16 (factor -> ENTIER .)
    )               reduce using rule 16 (factor -> ENTIER .)
    DIFF            reduce using rule 16 (factor -> ENTIER .)
    EGAL            reduce using rule 16 (factor -> ENTIER .)
    COMPARATEUR     reduce using rule 16 (factor -> ENTIER .)
    SUP             reduce using rule 16 (factor -> ENTIER .)
    INF             reduce using rule 16 (factor -> ENTIER .)
    OU              reduce using rule 16 (factor -> ENTIER .)
    ET              reduce using rule 16 (factor -> ENTIER .)
    MINUS           reduce using rule 16 (factor -> ENTIER .)
    PLUS            reduce using rule 16 (factor -> ENTIER .)
    ;               reduce using rule 16 (factor -> ENTIER .)


state 39

    (17) factor -> LIRE . ( )
    (               shift and go to state 65


state 40

    (26) boucle -> TANTQUE ( expr . ) { listeInstructions }
    (32) expr -> expr . DIFF expr
    (33) expr -> expr . EGAL expr
    (34) expr -> expr . COMPARATEUR expr
    (35) expr -> expr . SUP expr
    (36) expr -> expr . INF expr
    (37) expr -> expr . OU expr
    (38) expr -> expr . ET expr
    (39) expr -> expr . MINUS term
    (40) expr -> expr . PLUS term
    )               shift and go to state 66
    DIFF            shift and go to state 48
    EGAL            shift and go to state 49
    COMPARATEUR     shift and go to state 50
    SUP             shift and go to state 51
    INF             shift and go to state 52
    OU              shift and go to state 53
    ET              shift and go to state 54
    MINUS           shift and go to state 55
    PLUS            shift and go to state 56


state 41

    (21) affectation -> IDENTIFIANT = expr . ;
    (32) expr -> expr . DIFF expr
    (33) expr -> expr . EGAL expr
    (34) expr -> expr . COMPARATEUR expr
    (35) expr -> expr . SUP expr
    (36) expr -> expr . INF expr
    (37) expr -> expr . OU expr
    (38) expr -> expr . ET expr
    (39) expr -> expr . MINUS term
    (40) expr -> expr . PLUS term
    ;               shift and go to state 67
    DIFF            shift and go to state 48
    EGAL            shift and go to state 49
    COMPARATEUR     shift and go to state 50
    SUP             shift and go to state 51
    INF             shift and go to state 52
    OU              shift and go to state 53
    ET              shift and go to state 54
    MINUS           shift and go to state 55
    PLUS            shift and go to state 56


state 42

    (20) declaration -> type IDENTIFIANT = . expr ;
    (27) expr -> . MINUS expr
    (28) expr -> . NON expr
    (29) expr -> . NON IDENTIFIANT
    (30) expr -> . NON BOOLEEN_LITERAL
    (31) expr -> . term
    (32) expr -> . expr DIFF expr
    (33) expr -> . expr EGAL expr
    (34) expr -> . expr COMPARATEUR expr
    (35) expr -> . expr SUP expr
    (36) expr -> . expr INF expr
    (37) expr -> . expr OU expr
    (38) expr -> . expr ET expr
    (39) expr -> . expr MINUS term
    (40) expr -> . expr PLUS term
    (41) term -> . factor
    (42) term -> . factor MODULO factor
    (43) term -> . term MODULO factor
    (44) term -> . term DIV factor
    (45) term -> . term MULT factor
    (12) factor -> . BOOLEEN_LITERAL
    (13) factor -> . BOOLEEN
    (14) factor -> . ( expr )
    (15) factor -> . IDENTIFIANT
    (16) factor -> . ENTIER
    (17) factor -> . LIRE ( )
    MINUS           shift and go to state 31
    NON             shift and go to state 32
    BOOLEEN_LITERAL shift and go to state 34
    BOOLEEN         shift and go to state 37
    (               shift and go to state 29
    IDENTIFIANT     shift and go to state 33
    ENTIER          shift and go to state 38
    LIRE            shift and go to state 39

    expr                           shift and go to state 68
    term                           shift and go to state 35
    factor                         shift and go to state 36

state 43

    (11) ecrire -> ECRIRE ( expr . ) ;
    (32) expr -> expr . DIFF expr
    (33) expr -> expr . EGAL expr
    (34) expr -> expr . COMPARATEUR expr
    (35) expr -> expr . SUP expr
    (36) expr -> expr . INF expr
    (37) expr -> expr . OU expr
    (38) expr -> expr . ET expr
    (39) expr -> expr . MINUS term
    (40) expr -> expr . PLUS term
    )               shift and go to state 69
    DIFF            shift and go to state 48
    EGAL            shift and go to state 49
    COMPARATEUR     shift and go to state 50
    SUP             shift and go to state 51
    INF             shift and go to state 52
    OU              shift and go to state 53
    ET              shift and go to state 54
    MINUS           shift and go to state 55
    PLUS            shift and go to state 56


state 44

    (24) suite_sinosi -> SINON SI ( expr . ) { listeInstructions } suite_sinosi
    (32) expr -> expr . DIFF expr
    (33) expr -> expr . EGAL expr
    (34) expr -> expr . COMPARATEUR expr
    (35) expr -> expr . SUP expr
    (36) expr -> expr . INF expr
    (37) expr -> expr . OU expr
    (38) expr -> expr . ET expr
    (39) expr -> expr . MINUS term
    (40) expr -> expr . PLUS term
    )               shift and go to state 70
    DIFF            shift and go to state 48
    EGAL            shift and go to state 49
    COMPARATEUR     shift and go to state 50
    SUP             shift and go to state 51
    INF             shift and go to state 52
    OU              shift and go to state 53
    ET              shift and go to state 54
    MINUS           shift and go to state 55
    PLUS            shift and go to state 56


state 45

    (25) suite_sinosi -> SINON { listeInstructions } .
    SINON           reduce using rule 25 (suite_sinosi -> SINON { listeInstructions } .)
    TANTQUE         reduce using rule 25 (suite_sinosi -> SINON { listeInstructions } .)
    SI              reduce using rule 25 (suite_sinosi -> SINON { listeInstructions } .)
    IDENTIFIANT     reduce using rule 25 (suite_sinosi -> SINON { listeInstructions } .)
    ECRIRE          reduce using rule 25 (suite_sinosi -> SINON { listeInstructions } .)
    BOOLEEN         reduce using rule 25 (suite_sinosi -> SINON { listeInstructions } .)
    ENT             reduce using rule 25 (suite_sinosi -> SINON { listeInstructions } .)
    $end            reduce using rule 25 (suite_sinosi -> SINON { listeInstructions } .)
    }               reduce using rule 25 (suite_sinosi -> SINON { listeInstructions } .)


state 46

    (14) factor -> ( expr . )
    (32) expr -> expr . DIFF expr
    (33) expr -> expr . EGAL expr
    (34) expr -> expr . COMPARATEUR expr
    (35) expr -> expr . SUP expr
    (36) expr -> expr . INF expr
    (37) expr -> expr . OU expr
    (38) expr -> expr . ET expr
    (39) expr -> expr . MINUS term
    (40) expr -> expr . PLUS term
    )               shift and go to state 71
    DIFF            shift and go to state 48
    EGAL            shift and go to state 49
    COMPARATEUR     shift and go to state 50
    SUP             shift and go to state 51
    INF             shift and go to state 52
    OU              shift and go to state 53
    ET              shift and go to state 54
    MINUS           shift and go to state 55
    PLUS            shift and go to state 56


state 47

    (22) condition -> SI ( expr ) . { listeInstructions } suite_sinosi
    {               shift and go to state 72


state 48

    (32) expr -> expr DIFF . expr
    (27) expr -> . MINUS expr
    (28) expr -> . NON expr
    (29) expr -> . NON IDENTIFIANT
    (30) expr -> . NON BOOLEEN_LITERAL
    (31) expr -> . term
    (32) expr -> . expr DIFF expr
    (33) expr -> . expr EGAL expr
    (34) expr -> . expr COMPARATEUR expr
    (35) expr -> . expr SUP expr
    (36) expr -> . expr INF expr
    (37) expr -> . expr OU expr
    (38) expr -> . expr ET expr
    (39) expr -> . expr MINUS term
    (40) expr -> . expr PLUS term
    (41) term -> . factor
    (42) term -> . factor MODULO factor
    (43) term -> . term MODULO factor
    (44) term -> . term DIV factor
    (45) term -> . term MULT factor
    (12) factor -> . BOOLEEN_LITERAL
    (13) factor -> . BOOLEEN
    (14) factor -> . ( expr )
    (15) factor -> . IDENTIFIANT
    (16) factor -> . ENTIER
    (17) factor -> . LIRE ( )
    MINUS           shift and go to state 31
    NON             shift and go to state 32
    BOOLEEN_LITERAL shift and go to state 34
    BOOLEEN         shift and go to state 37
    (               shift and go to state 29
    IDENTIFIANT     shift and go to state 33
    ENTIER          shift and go to state 38
    LIRE            shift and go to state 39

    expr                           shift and go to state 73
    term                           shift and go to state 35
    factor                         shift and go to state 36

state 49

    (33) expr -> expr EGAL . expr
    (27) expr -> . MINUS expr
    (28) expr -> . NON expr
    (29) expr -> . NON IDENTIFIANT
    (30) expr -> . NON BOOLEEN_LITERAL
    (31) expr -> . term
    (32) expr -> . expr DIFF expr
    (33) expr -> . expr EGAL expr
    (34) expr -> . expr COMPARATEUR expr
    (35) expr -> . expr SUP expr
    (36) expr -> . expr INF expr
    (37) expr -> . expr OU expr
    (38) expr -> . expr ET expr
    (39) expr -> . expr MINUS term
    (40) expr -> . expr PLUS term
    (41) term -> . factor
    (42) term -> . factor MODULO factor
    (43) term -> . term MODULO factor
    (44) term -> . term DIV factor
    (45) term -> . term MULT factor
    (12) factor -> . BOOLEEN_LITERAL
    (13) factor -> . BOOLEEN
    (14) factor -> . ( expr )
    (15) factor -> . IDENTIFIANT
    (16) factor -> . ENTIER
    (17) factor -> . LIRE ( )
    MINUS           shift and go to state 31
    NON             shift and go to state 32
    BOOLEEN_LITERAL shift and go to state 34
    BOOLEEN         shift and go to state 37
    (               shift and go to state 29
    IDENTIFIANT     shift and go to state 33
    ENTIER          shift and go to state 38
    LIRE            shift and go to state 39

    expr                           shift and go to state 74
    term                           shift and go to state 35
    factor                         shift and go to state 36

state 50

    (34) expr -> expr COMPARATEUR . expr
    (27) expr -> . MINUS expr
    (28) expr -> . NON expr
    (29) expr -> . NON IDENTIFIANT
    (30) expr -> . NON BOOLEEN_LITERAL
    (31) expr -> . term
    (32) expr -> . expr DIFF expr
    (33) expr -> . expr EGAL expr
    (34) expr -> . expr COMPARATEUR expr
    (35) expr -> . expr SUP expr
    (36) expr -> . expr INF expr
    (37) expr -> . expr OU expr
    (38) expr -> . expr ET expr
    (39) expr -> . expr MINUS term
    (40) expr -> . expr PLUS term
    (41) term -> . factor
    (42) term -> . factor MODULO factor
    (43) term -> . term MODULO factor
    (44) term -> . term DIV factor
    (45) term -> . term MULT factor
    (12) factor -> . BOOLEEN_LITERAL
    (13) factor -> . BOOLEEN
    (14) factor -> . ( expr )
    (15) factor -> . IDENTIFIANT
    (16) factor -> . ENTIER
    (17) factor -> . LIRE ( )
    MINUS           shift and go to state 31
    NON             shift and go to state 32
    BOOLEEN_LITERAL shift and go to state 34
    BOOLEEN         shift and go to state 37
    (               shift and go to state 29
    IDENTIFIANT     shift and go to state 33
    ENTIER          shift and go to state 38
    LIRE            shift and go to state 39

    expr                           shift and go to state 75
    term                           shift and go to state 35
    factor                         shift and go to state 36

state 51

    (35) expr -> expr SUP . expr
    (27) expr -> . MINUS expr
    (28) expr -> . NON expr
    (29) expr -> . NON IDENTIFIANT
    (30) expr -> . NON BOOLEEN_LITERAL
    (31) expr -> . term
    (32) expr -> . expr DIFF expr
    (33) expr -> . expr EGAL expr
    (34) expr -> . expr COMPARATEUR expr
    (35) expr -> . expr SUP expr
    (36) expr -> . expr INF expr
    (37) expr -> . expr OU expr
    (38) expr -> . expr ET expr
    (39) expr -> . expr MINUS term
    (40) expr -> . expr PLUS term
    (41) term -> . factor
    (42) term -> . factor MODULO factor
    (43) term -> . term MODULO factor
    (44) term -> . term DIV factor
    (45) term -> . term MULT factor
    (12) factor -> . BOOLEEN_LITERAL
    (13) factor -> . BOOLEEN
    (14) factor -> . ( expr )
    (15) factor -> . IDENTIFIANT
    (16) factor -> . ENTIER
    (17) factor -> . LIRE ( )
    MINUS           shift and go to state 31
    NON             shift and go to state 32
    BOOLEEN_LITERAL shift and go to state 34
    BOOLEEN         shift and go to state 37
    (               shift and go to state 29
    IDENTIFIANT     shift and go to state 33
    ENTIER          shift and go to state 38
    LIRE            shift and go to state 39

    expr                           shift and go to state 76
    term                           shift and go to state 35
    factor                         shift and go to state 36

state 52

    (36) expr -> expr INF . expr
    (27) expr -> . MINUS expr
    (28) expr -> . NON expr
    (29) expr -> . NON IDENTIFIANT
    (30) expr -> . NON BOOLEEN_LITERAL
    (31) expr -> . term
    (32) expr -> . expr DIFF expr
    (33) expr -> . expr EGAL expr
    (34) expr -> . expr COMPARATEUR expr
    (35) expr -> . expr SUP expr
    (36) expr -> . expr INF expr
    (37) expr -> . expr OU expr
    (38) expr -> . expr ET expr
    (39) expr -> . expr MINUS term
    (40) expr -> . expr PLUS term
    (41) term -> . factor
    (42) term -> . factor MODULO factor
    (43) term -> . term MODULO factor
    (44) term -> . term DIV factor
    (45) term -> . term MULT factor
    (12) factor -> . BOOLEEN_LITERAL
    (13) factor -> . BOOLEEN
    (14) factor -> . ( expr )
    (15) factor -> . IDENTIFIANT
    (16) factor -> . ENTIER
    (17) factor -> . LIRE ( )
    MINUS           shift and go to state 31
    NON             shift and go to state 32
    BOOLEEN_LITERAL shift and go to state 34
    BOOLEEN         shift and go to state 37
    (               shift and go to state 29
    IDENTIFIANT     shift and go to state 33
    ENTIER          shift and go to state 38
    LIRE            shift and go to state 39

    expr                           shift and go to state 77
    term                           shift and go to state 35
    factor                         shift and go to state 36

state 53

    (37) expr -> expr OU . expr
    (27) expr -> . MINUS expr
    (28) expr -> . NON expr
    (29) expr -> . NON IDENTIFIANT
    (30) expr -> . NON BOOLEEN_LITERAL
    (31) expr -> . term
    (32) expr -> . expr DIFF expr
    (33) expr -> . expr EGAL expr
    (34) expr -> . expr COMPARATEUR expr
    (35) expr -> . expr SUP expr
    (36) expr -> . expr INF expr
    (37) expr -> . expr OU expr
    (38) expr -> . expr ET expr
    (39) expr -> . expr MINUS term
    (40) expr -> . expr PLUS term
    (41) term -> . factor
    (42) term -> . factor MODULO factor
    (43) term -> . term MODULO factor
    (44) term -> . term DIV factor
    (45) term -> . term MULT factor
    (12) factor -> . BOOLEEN_LITERAL
    (13) factor -> . BOOLEEN
    (14) factor -> . ( expr )
    (15) factor -> . IDENTIFIANT
    (16) factor -> . ENTIER
    (17) factor -> . LIRE ( )
    MINUS           shift and go to state 31
    NON             shift and go to state 32
    BOOLEEN_LITERAL shift and go to state 34
    BOOLEEN         shift and go to state 37
    (               shift and go to state 29
    IDENTIFIANT     shift and go to state 33
    ENTIER          shift and go to state 38
    LIRE            shift and go to state 39

    expr                           shift and go to state 78
    term                           shift and go to state 35
    factor                         shift and go to state 36

state 54

    (38) expr -> expr ET . expr
    (27) expr -> . MINUS expr
    (28) expr -> . NON expr
    (29) expr -> . NON IDENTIFIANT
    (30) expr -> . NON BOOLEEN_LITERAL
    (31) expr -> . term
    (32) expr -> . expr DIFF expr
    (33) expr -> . expr EGAL expr
    (34) expr -> . expr COMPARATEUR expr
    (35) expr -> . expr SUP expr
    (36) expr -> . expr INF expr
    (37) expr -> . expr OU expr
    (38) expr -> . expr ET expr
    (39) expr -> . expr MINUS term
    (40) expr -> . expr PLUS term
    (41) term -> . factor
    (42) term -> . factor MODULO factor
    (43) term -> . term MODULO factor
    (44) term -> . term DIV factor
    (45) term -> . term MULT factor
    (12) factor -> . BOOLEEN_LITERAL
    (13) factor -> . BOOLEEN
    (14) factor -> . ( expr )
    (15) factor -> . IDENTIFIANT
    (16) factor -> . ENTIER
    (17) factor -> . LIRE ( )
    MINUS           shift and go to state 31
    NON             shift and go to state 32
    BOOLEEN_LITERAL shift and go to state 34
    BOOLEEN         shift and go to state 37
    (               shift and go to state 29
    IDENTIFIANT     shift and go to state 33
    ENTIER          shift and go to state 38
    LIRE            shift and go to state 39

    expr                           shift and go to state 79
    term                           shift and go to state 35
    factor                         shift and go to state 36

state 55

    (39) expr -> expr MINUS . term
    (41) term -> . factor
    (42) term -> . factor MODULO factor
    (43) term -> . term MODULO factor
    (44) term -> . term DIV factor
    (45) term -> . term MULT factor
    (12) factor -> . BOOLEEN_LITERAL
    (13) factor -> . BOOLEEN
    (14) factor -> . ( expr )
    (15) factor -> . IDENTIFIANT
    (16) factor -> . ENTIER
    (17) factor -> . LIRE ( )
    BOOLEEN_LITERAL shift and go to state 34
    BOOLEEN         shift and go to state 37
    (               shift and go to state 29
    IDENTIFIANT     shift and go to state 33
    ENTIER          shift and go to state 38
    LIRE            shift and go to state 39

    term                           shift and go to state 80
    factor                         shift and go to state 36

state 56

    (40) expr -> expr PLUS . term
    (41) term -> . factor
    (42) term -> . factor MODULO factor
    (43) term -> . term MODULO factor
    (44) term -> . term DIV factor
    (45) term -> . term MULT factor
    (12) factor -> . BOOLEEN_LITERAL
    (13) factor -> . BOOLEEN
    (14) factor -> . ( expr )
    (15) factor -> . IDENTIFIANT
    (16) factor -> . ENTIER
    (17) factor -> . LIRE ( )
    BOOLEEN_LITERAL shift and go to state 34
    BOOLEEN         shift and go to state 37
    (               shift and go to state 29
    IDENTIFIANT     shift and go to state 33
    ENTIER          shift and go to state 38
    LIRE            shift and go to state 39

    term                           shift and go to state 81
    factor                         shift and go to state 36

state 57

    (27) expr -> MINUS expr .
    (32) expr -> expr . DIFF expr
    (33) expr -> expr . EGAL expr
    (34) expr -> expr . COMPARATEUR expr
    (35) expr -> expr . SUP expr
    (36) expr -> expr . INF expr
    (37) expr -> expr . OU expr
    (38) expr -> expr . ET expr
    (39) expr -> expr . MINUS term
    (40) expr -> expr . PLUS term
    )               reduce using rule 27 (expr -> MINUS expr .)
    ;               reduce using rule 27 (expr -> MINUS expr .)
    DIFF            shift and go to state 48
    EGAL            shift and go to state 49
    COMPARATEUR     shift and go to state 50
    SUP             shift and go to state 51
    INF             shift and go to state 52
    OU              shift and go to state 53
    ET              shift and go to state 54
    MINUS           shift and go to state 55
    PLUS            shift and go to state 56


state 58

    (28) expr -> NON expr .
    (32) expr -> expr . DIFF expr
    (33) expr -> expr . EGAL expr
    (34) expr -> expr . COMPARATEUR expr
    (35) expr -> expr . SUP expr
    (36) expr -> expr . INF expr
    (37) expr -> expr . OU expr
    (38) expr -> expr . ET expr
    (39) expr -> expr . MINUS term
    (40) expr -> expr . PLUS term
    )               reduce using rule 28 (expr -> NON expr .)
    ;               reduce using rule 28 (expr -> NON expr .)
    DIFF            shift and go to state 48
    EGAL            shift and go to state 49
    COMPARATEUR     shift and go to state 50
    SUP             shift and go to state 51
    INF             shift and go to state 52
    OU              shift and go to state 53
    ET              shift and go to state 54
    MINUS           shift and go to state 55
    PLUS            shift and go to state 56


state 59

    (29) expr -> NON IDENTIFIANT .
    (15) factor -> IDENTIFIANT .
  ! reduce/reduce conflict for DIFF resolved using rule 15 (factor -> IDENTIFIANT .)
  ! reduce/reduce conflict for EGAL resolved using rule 15 (factor -> IDENTIFIANT .)
  ! reduce/reduce conflict for COMPARATEUR resolved using rule 15 (factor -> IDENTIFIANT .)
  ! reduce/reduce conflict for SUP resolved using rule 15 (factor -> IDENTIFIANT .)
  ! reduce/reduce conflict for INF resolved using rule 15 (factor -> IDENTIFIANT .)
  ! reduce/reduce conflict for OU resolved using rule 15 (factor -> IDENTIFIANT .)
  ! reduce/reduce conflict for ET resolved using rule 15 (factor -> IDENTIFIANT .)
  ! reduce/reduce conflict for MINUS resolved using rule 15 (factor -> IDENTIFIANT .)
  ! reduce/reduce conflict for PLUS resolved using rule 15 (factor -> IDENTIFIANT .)
  ! reduce/reduce conflict for ) resolved using rule 15 (factor -> IDENTIFIANT .)
  ! reduce/reduce conflict for ; resolved using rule 15 (factor -> IDENTIFIANT .)
    MODULO          reduce using rule 15 (factor -> IDENTIFIANT .)
    DIV             reduce using rule 15 (factor -> IDENTIFIANT .)
    MULT            reduce using rule 15 (factor -> IDENTIFIANT .)
    DIFF            reduce using rule 15 (factor -> IDENTIFIANT .)
    EGAL            reduce using rule 15 (factor -> IDENTIFIANT .)
    COMPARATEUR     reduce using rule 15 (factor -> IDENTIFIANT .)
    SUP             reduce using rule 15 (factor -> IDENTIFIANT .)
    INF             reduce using rule 15 (factor -> IDENTIFIANT .)
    OU              reduce using rule 15 (factor -> IDENTIFIANT .)
    ET              reduce using rule 15 (factor -> IDENTIFIANT .)
    MINUS           reduce using rule 15 (factor -> IDENTIFIANT .)
    PLUS            reduce using rule 15 (factor -> IDENTIFIANT .)
    )               reduce using rule 15 (factor -> IDENTIFIANT .)
    ;               reduce using rule 15 (factor -> IDENTIFIANT .)


state 60

    (30) expr -> NON BOOLEEN_LITERAL .
    (12) factor -> BOOLEEN_LITERAL .
  ! reduce/reduce conflict for DIFF resolved using rule 12 (factor -> BOOLEEN_LITERAL .)
  ! reduce/reduce conflict for EGAL resolved using rule 12 (factor -> BOOLEEN_LITERAL .)
  ! reduce/reduce conflict for COMPARATEUR resolved using rule 12 (factor -> BOOLEEN_LITERAL .)
  ! reduce/reduce conflict for SUP resolved using rule 12 (factor -> BOOLEEN_LITERAL .)
  ! reduce/reduce conflict for INF resolved using rule 12 (factor -> BOOLEEN_LITERAL .)
  ! reduce/reduce conflict for OU resolved using rule 12 (factor -> BOOLEEN_LITERAL .)
  ! reduce/reduce conflict for ET resolved using rule 12 (factor -> BOOLEEN_LITERAL .)
  ! reduce/reduce conflict for MINUS resolved using rule 12 (factor -> BOOLEEN_LITERAL .)
  ! reduce/reduce conflict for PLUS resolved using rule 12 (factor -> BOOLEEN_LITERAL .)
  ! reduce/reduce conflict for ) resolved using rule 12 (factor -> BOOLEEN_LITERAL .)
  ! reduce/reduce conflict for ; resolved using rule 12 (factor -> BOOLEEN_LITERAL .)
    MODULO          reduce using rule 12 (factor -> BOOLEEN_LITERAL .)
    DIV             reduce using rule 12 (factor -> BOOLEEN_LITERAL .)
    MULT            reduce using rule 12 (factor -> BOOLEEN_LITERAL .)
    DIFF            reduce using rule 12 (factor -> BOOLEEN_LITERAL .)
    EGAL            reduce using rule 12 (factor -> BOOLEEN_LITERAL .)
    COMPARATEUR     reduce using rule 12 (factor -> BOOLEEN_LITERAL .)
    SUP             reduce using rule 12 (factor -> BOOLEEN_LITERAL .)
    INF             reduce using rule 12 (factor -> BOOLEEN_LITERAL .)
    OU              reduce using rule 12 (factor -> BOOLEEN_LITERAL .)
    ET              reduce using rule 12 (factor -> BOOLEEN_LITERAL .)
    MINUS           reduce using rule 12 (factor -> BOOLEEN_LITERAL .)
    PLUS            reduce using rule 12 (factor -> BOOLEEN_LITERAL .)
    )               reduce using rule 12 (factor -> BOOLEEN_LITERAL .)
    ;               reduce using rule 12 (factor -> BOOLEEN_LITERAL .)


state 61

    (43) term -> term MODULO . factor
    (12) factor -> . BOOLEEN_LITERAL
    (13) factor -> . BOOLEEN
    (14) factor -> . ( expr )
    (15) factor -> . IDENTIFIANT
    (16) factor -> . ENTIER
    (17) factor -> . LIRE ( )
    BOOLEEN_LITERAL shift and go to state 34
    BOOLEEN         shift and go to state 37
    (               shift and go to state 29
    IDENTIFIANT     shift and go to state 33
    ENTIER          shift and go to state 38
    LIRE            shift and go to state 39

    factor                         shift and go to state 82

state 62

    (44) term -> term DIV . factor
    (12) factor -> . BOOLEEN_LITERAL
    (13) factor -> . BOOLEEN
    (14) factor -> . ( expr )
    (15) factor -> . IDENTIFIANT
    (16) factor -> . ENTIER
    (17) factor -> . LIRE ( )
    BOOLEEN_LITERAL shift and go to state 34
    BOOLEEN         shift and go to state 37
    (               shift and go to state 29
    IDENTIFIANT     shift and go to state 33
    ENTIER          shift and go to state 38
    LIRE            shift and go to state 39

    factor                         shift and go to state 83

state 63

    (45) term -> term MULT . factor
    (12) factor -> . BOOLEEN_LITERAL
    (13) factor -> . BOOLEEN
    (14) factor -> . ( expr )
    (15) factor -> . IDENTIFIANT
    (16) factor -> . ENTIER
    (17) factor -> . LIRE ( )
    BOOLEEN_LITERAL shift and go to state 34
    BOOLEEN         shift and go to state 37
    (               shift and go to state 29
    IDENTIFIANT     shift and go to state 33
    ENTIER          shift and go to state 38
    LIRE            shift and go to state 39

    factor                         shift and go to state 84

state 64

    (42) term -> factor MODULO . factor
    (12) factor -> . BOOLEEN_LITERAL
    (13) factor -> . BOOLEEN
    (14) factor -> . ( expr )
    (15) factor -> . IDENTIFIANT
    (16) factor -> . ENTIER
    (17) factor -> . LIRE ( )
    BOOLEEN_LITERAL shift and go to state 34
    BOOLEEN         shift and go to state 37
    (               shift and go to state 29
    IDENTIFIANT     shift and go to state 33
    ENTIER          shift and go to state 38
    LIRE            shift and go to state 39

    factor                         shift and go to state 85

state 65

    (17) factor -> LIRE ( . )
    )               shift and go to state 86


state 66

    (26) boucle -> TANTQUE ( expr ) . { listeInstructions }
    {               shift and go to state 87


state 67

    (21) affectation -> IDENTIFIANT = expr ; .
    SINON           reduce using rule 21 (affectation -> IDENTIFIANT = expr ; .)
    TANTQUE         reduce using rule 21 (affectation -> IDENTIFIANT = expr ; .)
    SI              reduce using rule 21 (affectation -> IDENTIFIANT = expr ; .)
    IDENTIFIANT     reduce using rule 21 (affectation -> IDENTIFIANT = expr ; .)
    ECRIRE          reduce using rule 21 (affectation -> IDENTIFIANT = expr ; .)
    BOOLEEN         reduce using rule 21 (affectation -> IDENTIFIANT = expr ; .)
    ENT             reduce using rule 21 (affectation -> IDENTIFIANT = expr ; .)
    $end            reduce using rule 21 (affectation -> IDENTIFIANT = expr ; .)
    }               reduce using rule 21 (affectation -> IDENTIFIANT = expr ; .)


state 68

    (20) declaration -> type IDENTIFIANT = expr . ;
    (32) expr -> expr . DIFF expr
    (33) expr -> expr . EGAL expr
    (34) expr -> expr . COMPARATEUR expr
    (35) expr -> expr . SUP expr
    (36) expr -> expr . INF expr
    (37) expr -> expr . OU expr
    (38) expr -> expr . ET expr
    (39) expr -> expr . MINUS term
    (40) expr -> expr . PLUS term
    ;               shift and go to state 88
    DIFF            shift and go to state 48
    EGAL            shift and go to state 49
    COMPARATEUR     shift and go to state 50
    SUP             shift and go to state 51
    INF             shift and go to state 52
    OU              shift and go to state 53
    ET              shift and go to state 54
    MINUS           shift and go to state 55
    PLUS            shift and go to state 56


state 69

    (11) ecrire -> ECRIRE ( expr ) . ;
    ;               shift and go to state 89


state 70

    (24) suite_sinosi -> SINON SI ( expr ) . { listeInstructions } suite_sinosi
    {               shift and go to state 90


state 71

    (14) factor -> ( expr ) .
    MODULO          reduce using rule 14 (factor -> ( expr ) .)
    DIV             reduce using rule 14 (factor -> ( expr ) .)
    MULT            reduce using rule 14 (factor -> ( expr ) .)
    )               reduce using rule 14 (factor -> ( expr ) .)
    DIFF            reduce using rule 14 (factor -> ( expr ) .)
    EGAL            reduce using rule 14 (factor -> ( expr ) .)
    COMPARATEUR     reduce using rule 14 (factor -> ( expr ) .)
    SUP             reduce using rule 14 (factor -> ( expr ) .)
    INF             reduce using rule 14 (factor -> ( expr ) .)
    OU              reduce using rule 14 (factor -> ( expr ) .)
    ET              reduce using rule 14 (factor -> ( expr ) .)
    MINUS           reduce using rule 14 (factor -> ( expr ) .)
    PLUS            reduce using rule 14 (factor -> ( expr ) .)
    ;               reduce using rule 14 (factor -> ( expr ) .)


state 72

    (22) condition -> SI ( expr ) { . listeInstructions } suite_sinosi
    (3) listeInstructions -> . listeInstructions instruction
    (4) listeInstructions -> . instruction
    (5) instruction -> . suite_sinosi
    (6) instruction -> . boucle
    (7) instruction -> . condition
    (8) instruction -> . affectation
    (9) instruction -> . declaration
    (10) instruction -> . ecrire
    (23) suite_sinosi -> .
    (24) suite_sinosi -> . SINON SI ( expr ) { listeInstructions } suite_sinosi
    (25) suite_sinosi -> . SINON { listeInstructions }
    (26) boucle -> . TANTQUE ( expr ) { listeInstructions }
    (22) condition -> . SI ( expr ) { listeInstructions } suite_sinosi
    (21) affectation -> . IDENTIFIANT = expr ;
    (20) declaration -> . type IDENTIFIANT = expr ;
    (11) ecrire -> . ECRIRE ( expr ) ;
    (18) type -> . BOOLEEN
    (19) type -> . ENT
  ! shift/reduce conflict for SINON resolved as shift
  ! shift/reduce conflict for TANTQUE resolved as shift
  ! shift/reduce conflict for SI resolved as shift
  ! shift/reduce conflict for IDENTIFIANT resolved as shift
  ! shift/reduce conflict for ECRIRE resolved as shift
  ! shift/reduce conflict for BOOLEEN resolved as shift
  ! shift/reduce conflict for ENT resolved as shift
    }               reduce using rule 23 (suite_sinosi -> .)
    SINON           shift and go to state 11
    TANTQUE         shift and go to state 13
    SI              shift and go to state 12
    IDENTIFIANT     shift and go to state 14
    ECRIRE          shift and go to state 16
    BOOLEEN         shift and go to state 17
    ENT             shift and go to state 18

    listeInstructions              shift and go to state 91
    suite_sinosi                   shift and go to state 5
    instruction                    shift and go to state 4
    boucle                         shift and go to state 6
    condition                      shift and go to state 7
    affectation                    shift and go to state 8
    declaration                    shift and go to state 9
    ecrire                         shift and go to state 10
    type                           shift and go to state 15

state 73

    (32) expr -> expr DIFF expr .
    (32) expr -> expr . DIFF expr
    (33) expr -> expr . EGAL expr
    (34) expr -> expr . COMPARATEUR expr
    (35) expr -> expr . SUP expr
    (36) expr -> expr . INF expr
    (37) expr -> expr . OU expr
    (38) expr -> expr . ET expr
    (39) expr -> expr . MINUS term
    (40) expr -> expr . PLUS term
    )               reduce using rule 32 (expr -> expr DIFF expr .)
    DIFF            reduce using rule 32 (expr -> expr DIFF expr .)
    EGAL            reduce using rule 32 (expr -> expr DIFF expr .)
    COMPARATEUR     reduce using rule 32 (expr -> expr DIFF expr .)
    SUP             reduce using rule 32 (expr -> expr DIFF expr .)
    INF             reduce using rule 32 (expr -> expr DIFF expr .)
    OU              reduce using rule 32 (expr -> expr DIFF expr .)
    ET              reduce using rule 32 (expr -> expr DIFF expr .)
    MINUS           reduce using rule 32 (expr -> expr DIFF expr .)
    PLUS            reduce using rule 32 (expr -> expr DIFF expr .)
    ;               reduce using rule 32 (expr -> expr DIFF expr .)


state 74

    (33) expr -> expr EGAL expr .
    (32) expr -> expr . DIFF expr
    (33) expr -> expr . EGAL expr
    (34) expr -> expr . COMPARATEUR expr
    (35) expr -> expr . SUP expr
    (36) expr -> expr . INF expr
    (37) expr -> expr . OU expr
    (38) expr -> expr . ET expr
    (39) expr -> expr . MINUS term
    (40) expr -> expr . PLUS term
    )               reduce using rule 33 (expr -> expr EGAL expr .)
    DIFF            reduce using rule 33 (expr -> expr EGAL expr .)
    EGAL            reduce using rule 33 (expr -> expr EGAL expr .)
    COMPARATEUR     reduce using rule 33 (expr -> expr EGAL expr .)
    SUP             reduce using rule 33 (expr -> expr EGAL expr .)
    INF             reduce using rule 33 (expr -> expr EGAL expr .)
    OU              reduce using rule 33 (expr -> expr EGAL expr .)
    ET              reduce using rule 33 (expr -> expr EGAL expr .)
    MINUS           reduce using rule 33 (expr -> expr EGAL expr .)
    PLUS            reduce using rule 33 (expr -> expr EGAL expr .)
    ;               reduce using rule 33 (expr -> expr EGAL expr .)


state 75

    (34) expr -> expr COMPARATEUR expr .
    (32) expr -> expr . DIFF expr
    (33) expr -> expr . EGAL expr
    (34) expr -> expr . COMPARATEUR expr
    (35) expr -> expr . SUP expr
    (36) expr -> expr . INF expr
    (37) expr -> expr . OU expr
    (38) expr -> expr . ET expr
    (39) expr -> expr . MINUS term
    (40) expr -> expr . PLUS term
    )               reduce using rule 34 (expr -> expr COMPARATEUR expr .)
    DIFF            reduce using rule 34 (expr -> expr COMPARATEUR expr .)
    EGAL            reduce using rule 34 (expr -> expr COMPARATEUR expr .)
    COMPARATEUR     reduce using rule 34 (expr -> expr COMPARATEUR expr .)
    SUP             reduce using rule 34 (expr -> expr COMPARATEUR expr .)
    INF             reduce using rule 34 (expr -> expr COMPARATEUR expr .)
    OU              reduce using rule 34 (expr -> expr COMPARATEUR expr .)
    ET              reduce using rule 34 (expr -> expr COMPARATEUR expr .)
    MINUS           reduce using rule 34 (expr -> expr COMPARATEUR expr .)
    PLUS            reduce using rule 34 (expr -> expr COMPARATEUR expr .)
    ;               reduce using rule 34 (expr -> expr COMPARATEUR expr .)


state 76

    (35) expr -> expr SUP expr .
    (32) expr -> expr . DIFF expr
    (33) expr -> expr . EGAL expr
    (34) expr -> expr . COMPARATEUR expr
    (35) expr -> expr . SUP expr
    (36) expr -> expr . INF expr
    (37) expr -> expr . OU expr
    (38) expr -> expr . ET expr
    (39) expr -> expr . MINUS term
    (40) expr -> expr . PLUS term
    )               reduce using rule 35 (expr -> expr SUP expr .)
    DIFF            reduce using rule 35 (expr -> expr SUP expr .)
    EGAL            reduce using rule 35 (expr -> expr SUP expr .)
    COMPARATEUR     reduce using rule 35 (expr -> expr SUP expr .)
    SUP             reduce using rule 35 (expr -> expr SUP expr .)
    INF             reduce using rule 35 (expr -> expr SUP expr .)
    OU              reduce using rule 35 (expr -> expr SUP expr .)
    ET              reduce using rule 35 (expr -> expr SUP expr .)
    MINUS           reduce using rule 35 (expr -> expr SUP expr .)
    PLUS            reduce using rule 35 (expr -> expr SUP expr .)
    ;               reduce using rule 35 (expr -> expr SUP expr .)


state 77

    (36) expr -> expr INF expr .
    (32) expr -> expr . DIFF expr
    (33) expr -> expr . EGAL expr
    (34) expr -> expr . COMPARATEUR expr
    (35) expr -> expr . SUP expr
    (36) expr -> expr . INF expr
    (37) expr -> expr . OU expr
    (38) expr -> expr . ET expr
    (39) expr -> expr . MINUS term
    (40) expr -> expr . PLUS term
    )               reduce using rule 36 (expr -> expr INF expr .)
    DIFF            reduce using rule 36 (expr -> expr INF expr .)
    EGAL            reduce using rule 36 (expr -> expr INF expr .)
    COMPARATEUR     reduce using rule 36 (expr -> expr INF expr .)
    SUP             reduce using rule 36 (expr -> expr INF expr .)
    INF             reduce using rule 36 (expr -> expr INF expr .)
    OU              reduce using rule 36 (expr -> expr INF expr .)
    ET              reduce using rule 36 (expr -> expr INF expr .)
    MINUS           reduce using rule 36 (expr -> expr INF expr .)
    PLUS            reduce using rule 36 (expr -> expr INF expr .)
    ;               reduce using rule 36 (expr -> expr INF expr .)


state 78

    (37) expr -> expr OU expr .
    (32) expr -> expr . DIFF expr
    (33) expr -> expr . EGAL expr
    (34) expr -> expr . COMPARATEUR expr
    (35) expr -> expr . SUP expr
    (36) expr -> expr . INF expr
    (37) expr -> expr . OU expr
    (38) expr -> expr . ET expr
    (39) expr -> expr . MINUS term
    (40) expr -> expr . PLUS term
    )               reduce using rule 37 (expr -> expr OU expr .)
    OU              reduce using rule 37 (expr -> expr OU expr .)
    ET              reduce using rule 37 (expr -> expr OU expr .)
    MINUS           reduce using rule 37 (expr -> expr OU expr .)
    PLUS            reduce using rule 37 (expr -> expr OU expr .)
    ;               reduce using rule 37 (expr -> expr OU expr .)
    DIFF            shift and go to state 48
    EGAL            shift and go to state 49
    COMPARATEUR     shift and go to state 50
    SUP             shift and go to state 51
    INF             shift and go to state 52


state 79

    (38) expr -> expr ET expr .
    (32) expr -> expr . DIFF expr
    (33) expr -> expr . EGAL expr
    (34) expr -> expr . COMPARATEUR expr
    (35) expr -> expr . SUP expr
    (36) expr -> expr . INF expr
    (37) expr -> expr . OU expr
    (38) expr -> expr . ET expr
    (39) expr -> expr . MINUS term
    (40) expr -> expr . PLUS term
    )               reduce using rule 38 (expr -> expr ET expr .)
    ET              reduce using rule 38 (expr -> expr ET expr .)
    MINUS           reduce using rule 38 (expr -> expr ET expr .)
    PLUS            reduce using rule 38 (expr -> expr ET expr .)
    ;               reduce using rule 38 (expr -> expr ET expr .)
    DIFF            shift and go to state 48
    EGAL            shift and go to state 49
    COMPARATEUR     shift and go to state 50
    SUP             shift and go to state 51
    INF             shift and go to state 52
    OU              shift and go to state 53


state 80

    (39) expr -> expr MINUS term .
    (43) term -> term . MODULO factor
    (44) term -> term . DIV factor
    (45) term -> term . MULT factor
    )               reduce using rule 39 (expr -> expr MINUS term .)
    DIFF            reduce using rule 39 (expr -> expr MINUS term .)
    EGAL            reduce using rule 39 (expr -> expr MINUS term .)
    COMPARATEUR     reduce using rule 39 (expr -> expr MINUS term .)
    SUP             reduce using rule 39 (expr -> expr MINUS term .)
    INF             reduce using rule 39 (expr -> expr MINUS term .)
    OU              reduce using rule 39 (expr -> expr MINUS term .)
    ET              reduce using rule 39 (expr -> expr MINUS term .)
    MINUS           reduce using rule 39 (expr -> expr MINUS term .)
    PLUS            reduce using rule 39 (expr -> expr MINUS term .)
    ;               reduce using rule 39 (expr -> expr MINUS term .)
    MODULO          shift and go to state 61
    DIV             shift and go to state 62
    MULT            shift and go to state 63


state 81

    (40) expr -> expr PLUS term .
    (43) term -> term . MODULO factor
    (44) term -> term . DIV factor
    (45) term -> term . MULT factor
    )               reduce using rule 40 (expr -> expr PLUS term .)
    DIFF            reduce using rule 40 (expr -> expr PLUS term .)
    EGAL            reduce using rule 40 (expr -> expr PLUS term .)
    COMPARATEUR     reduce using rule 40 (expr -> expr PLUS term .)
    SUP             reduce using rule 40 (expr -> expr PLUS term .)
    INF             reduce using rule 40 (expr -> expr PLUS term .)
    OU              reduce using rule 40 (expr -> expr PLUS term .)
    ET              reduce using rule 40 (expr -> expr PLUS term .)
    MINUS           reduce using rule 40 (expr -> expr PLUS term .)
    PLUS            reduce using rule 40 (expr -> expr PLUS term .)
    ;               reduce using rule 40 (expr -> expr PLUS term .)
    MODULO          shift and go to state 61
    DIV             shift and go to state 62
    MULT            shift and go to state 63


state 82

    (43) term -> term MODULO factor .
    MODULO          reduce using rule 43 (term -> term MODULO factor .)
    DIV             reduce using rule 43 (term -> term MODULO factor .)
    MULT            reduce using rule 43 (term -> term MODULO factor .)
    )               reduce using rule 43 (term -> term MODULO factor .)
    DIFF            reduce using rule 43 (term -> term MODULO factor .)
    EGAL            reduce using rule 43 (term -> term MODULO factor .)
    COMPARATEUR     reduce using rule 43 (term -> term MODULO factor .)
    SUP             reduce using rule 43 (term -> term MODULO factor .)
    INF             reduce using rule 43 (term -> term MODULO factor .)
    OU              reduce using rule 43 (term -> term MODULO factor .)
    ET              reduce using rule 43 (term -> term MODULO factor .)
    MINUS           reduce using rule 43 (term -> term MODULO factor .)
    PLUS            reduce using rule 43 (term -> term MODULO factor .)
    ;               reduce using rule 43 (term -> term MODULO factor .)


state 83

    (44) term -> term DIV factor .
    MODULO          reduce using rule 44 (term -> term DIV factor .)
    DIV             reduce using rule 44 (term -> term DIV factor .)
    MULT            reduce using rule 44 (term -> term DIV factor .)
    )               reduce using rule 44 (term -> term DIV factor .)
    DIFF            reduce using rule 44 (term -> term DIV factor .)
    EGAL            reduce using rule 44 (term -> term DIV factor .)
    COMPARATEUR     reduce using rule 44 (term -> term DIV factor .)
    SUP             reduce using rule 44 (term -> term DIV factor .)
    INF             reduce using rule 44 (term -> term DIV factor .)
    OU              reduce using rule 44 (term -> term DIV factor .)
    ET              reduce using rule 44 (term -> term DIV factor .)
    MINUS           reduce using rule 44 (term -> term DIV factor .)
    PLUS            reduce using rule 44 (term -> term DIV factor .)
    ;               reduce using rule 44 (term -> term DIV factor .)


state 84

    (45) term -> term MULT factor .
    MODULO          reduce using rule 45 (term -> term MULT factor .)
    DIV             reduce using rule 45 (term -> term MULT factor .)
    MULT            reduce using rule 45 (term -> term MULT factor .)
    )               reduce using rule 45 (term -> term MULT factor .)
    DIFF            reduce using rule 45 (term -> term MULT factor .)
    EGAL            reduce using rule 45 (term -> term MULT factor .)
    COMPARATEUR     reduce using rule 45 (term -> term MULT factor .)
    SUP             reduce using rule 45 (term -> term MULT factor .)
    INF             reduce using rule 45 (term -> term MULT factor .)
    OU              reduce using rule 45 (term -> term MULT factor .)
    ET              reduce using rule 45 (term -> term MULT factor .)
    MINUS           reduce using rule 45 (term -> term MULT factor .)
    PLUS            reduce using rule 45 (term -> term MULT factor .)
    ;               reduce using rule 45 (term -> term MULT factor .)


state 85

    (42) term -> factor MODULO factor .
    MODULO          reduce using rule 42 (term -> factor MODULO factor .)
    DIV             reduce using rule 42 (term -> factor MODULO factor .)
    MULT            reduce using rule 42 (term -> factor MODULO factor .)
    )               reduce using rule 42 (term -> factor MODULO factor .)
    DIFF            reduce using rule 42 (term -> factor MODULO factor .)
    EGAL            reduce using rule 42 (term -> factor MODULO factor .)
    COMPARATEUR     reduce using rule 42 (term -> factor MODULO factor .)
    SUP             reduce using rule 42 (term -> factor MODULO factor .)
    INF             reduce using rule 42 (term -> factor MODULO factor .)
    OU              reduce using rule 42 (term -> factor MODULO factor .)
    ET              reduce using rule 42 (term -> factor MODULO factor .)
    MINUS           reduce using rule 42 (term -> factor MODULO factor .)
    PLUS            reduce using rule 42 (term -> factor MODULO factor .)
    ;               reduce using rule 42 (term -> factor MODULO factor .)


state 86

    (17) factor -> LIRE ( ) .
    MODULO          reduce using rule 17 (factor -> LIRE ( ) .)
    DIV             reduce using rule 17 (factor -> LIRE ( ) .)
    MULT            reduce using rule 17 (factor -> LIRE ( ) .)
    )               reduce using rule 17 (factor -> LIRE ( ) .)
    DIFF            reduce using rule 17 (factor -> LIRE ( ) .)
    EGAL            reduce using rule 17 (factor -> LIRE ( ) .)
    COMPARATEUR     reduce using rule 17 (factor -> LIRE ( ) .)
    SUP             reduce using rule 17 (factor -> LIRE ( ) .)
    INF             reduce using rule 17 (factor -> LIRE ( ) .)
    OU              reduce using rule 17 (factor -> LIRE ( ) .)
    ET              reduce using rule 17 (factor -> LIRE ( ) .)
    MINUS           reduce using rule 17 (factor -> LIRE ( ) .)
    PLUS            reduce using rule 17 (factor -> LIRE ( ) .)
    ;               reduce using rule 17 (factor -> LIRE ( ) .)


state 87

    (26) boucle -> TANTQUE ( expr ) { . listeInstructions }
    (3) listeInstructions -> . listeInstructions instruction
    (4) listeInstructions -> . instruction
    (5) instruction -> . suite_sinosi
    (6) instruction -> . boucle
    (7) instruction -> . condition
    (8) instruction -> . affectation
    (9) instruction -> . declaration
    (10) instruction -> . ecrire
    (23) suite_sinosi -> .
    (24) suite_sinosi -> . SINON SI ( expr ) { listeInstructions } suite_sinosi
    (25) suite_sinosi -> . SINON { listeInstructions }
    (26) boucle -> . TANTQUE ( expr ) { listeInstructions }
    (22) condition -> . SI ( expr ) { listeInstructions } suite_sinosi
    (21) affectation -> . IDENTIFIANT = expr ;
    (20) declaration -> . type IDENTIFIANT = expr ;
    (11) ecrire -> . ECRIRE ( expr ) ;
    (18) type -> . BOOLEEN
    (19) type -> . ENT
  ! shift/reduce conflict for SINON resolved as shift
  ! shift/reduce conflict for TANTQUE resolved as shift
  ! shift/reduce conflict for SI resolved as shift
  ! shift/reduce conflict for IDENTIFIANT resolved as shift
  ! shift/reduce conflict for ECRIRE resolved as shift
  ! shift/reduce conflict for BOOLEEN resolved as shift
  ! shift/reduce conflict for ENT resolved as shift
    }               reduce using rule 23 (suite_sinosi -> .)
    SINON           shift and go to state 11
    TANTQUE         shift and go to state 13
    SI              shift and go to state 12
    IDENTIFIANT     shift and go to state 14
    ECRIRE          shift and go to state 16
    BOOLEEN         shift and go to state 17
    ENT             shift and go to state 18

    listeInstructions              shift and go to state 92
    instruction                    shift and go to state 4
    suite_sinosi                   shift and go to state 5
    boucle                         shift and go to state 6
    condition                      shift and go to state 7
    affectation                    shift and go to state 8
    declaration                    shift and go to state 9
    ecrire                         shift and go to state 10
    type                           shift and go to state 15

state 88

    (20) declaration -> type IDENTIFIANT = expr ; .
    SINON           reduce using rule 20 (declaration -> type IDENTIFIANT = expr ; .)
    TANTQUE         reduce using rule 20 (declaration -> type IDENTIFIANT = expr ; .)
    SI              reduce using rule 20 (declaration -> type IDENTIFIANT = expr ; .)
    IDENTIFIANT     reduce using rule 20 (declaration -> type IDENTIFIANT = expr ; .)
    ECRIRE          reduce using rule 20 (declaration -> type IDENTIFIANT = expr ; .)
    BOOLEEN         reduce using rule 20 (declaration -> type IDENTIFIANT = expr ; .)
    ENT             reduce using rule 20 (declaration -> type IDENTIFIANT = expr ; .)
    $end            reduce using rule 20 (declaration -> type IDENTIFIANT = expr ; .)
    }               reduce using rule 20 (declaration -> type IDENTIFIANT = expr ; .)


state 89

    (11) ecrire -> ECRIRE ( expr ) ; .
    SINON           reduce using rule 11 (ecrire -> ECRIRE ( expr ) ; .)
    TANTQUE         reduce using rule 11 (ecrire -> ECRIRE ( expr ) ; .)
    SI              reduce using rule 11 (ecrire -> ECRIRE ( expr ) ; .)
    IDENTIFIANT     reduce using rule 11 (ecrire -> ECRIRE ( expr ) ; .)
    ECRIRE          reduce using rule 11 (ecrire -> ECRIRE ( expr ) ; .)
    BOOLEEN         reduce using rule 11 (ecrire -> ECRIRE ( expr ) ; .)
    ENT             reduce using rule 11 (ecrire -> ECRIRE ( expr ) ; .)
    $end            reduce using rule 11 (ecrire -> ECRIRE ( expr ) ; .)
    }               reduce using rule 11 (ecrire -> ECRIRE ( expr ) ; .)


state 90

    (24) suite_sinosi -> SINON SI ( expr ) { . listeInstructions } suite_sinosi
    (3) listeInstructions -> . listeInstructions instruction
    (4) listeInstructions -> . instruction
    (5) instruction -> . suite_sinosi
    (6) instruction -> . boucle
    (7) instruction -> . condition
    (8) instruction -> . affectation
    (9) instruction -> . declaration
    (10) instruction -> . ecrire
    (23) suite_sinosi -> .
    (24) suite_sinosi -> . SINON SI ( expr ) { listeInstructions } suite_sinosi
    (25) suite_sinosi -> . SINON { listeInstructions }
    (26) boucle -> . TANTQUE ( expr ) { listeInstructions }
    (22) condition -> . SI ( expr ) { listeInstructions } suite_sinosi
    (21) affectation -> . IDENTIFIANT = expr ;
    (20) declaration -> . type IDENTIFIANT = expr ;
    (11) ecrire -> . ECRIRE ( expr ) ;
    (18) type -> . BOOLEEN
    (19) type -> . ENT
  ! shift/reduce conflict for SINON resolved as shift
  ! shift/reduce conflict for TANTQUE resolved as shift
  ! shift/reduce conflict for SI resolved as shift
  ! shift/reduce conflict for IDENTIFIANT resolved as shift
  ! shift/reduce conflict for ECRIRE resolved as shift
  ! shift/reduce conflict for BOOLEEN resolved as shift
  ! shift/reduce conflict for ENT resolved as shift
    }               reduce using rule 23 (suite_sinosi -> .)
    SINON           shift and go to state 11
    TANTQUE         shift and go to state 13
    SI              shift and go to state 12
    IDENTIFIANT     shift and go to state 14
    ECRIRE          shift and go to state 16
    BOOLEEN         shift and go to state 17
    ENT             shift and go to state 18

    listeInstructions              shift and go to state 93
    suite_sinosi                   shift and go to state 5
    instruction                    shift and go to state 4
    boucle                         shift and go to state 6
    condition                      shift and go to state 7
    affectation                    shift and go to state 8
    declaration                    shift and go to state 9
    ecrire                         shift and go to state 10
    type                           shift and go to state 15

state 91

    (22) condition -> SI ( expr ) { listeInstructions . } suite_sinosi
    (3) listeInstructions -> listeInstructions . instruction
    (5) instruction -> . suite_sinosi
    (6) instruction -> . boucle
    (7) instruction -> . condition
    (8) instruction -> . affectation
    (9) instruction -> . declaration
    (10) instruction -> . ecrire
    (23) suite_sinosi -> .
    (24) suite_sinosi -> . SINON SI ( expr ) { listeInstructions } suite_sinosi
    (25) suite_sinosi -> . SINON { listeInstructions }
    (26) boucle -> . TANTQUE ( expr ) { listeInstructions }
    (22) condition -> . SI ( expr ) { listeInstructions } suite_sinosi
    (21) affectation -> . IDENTIFIANT = expr ;
    (20) declaration -> . type IDENTIFIANT = expr ;
    (11) ecrire -> . ECRIRE ( expr ) ;
    (18) type -> . BOOLEEN
    (19) type -> . ENT
  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for SINON resolved as shift
  ! shift/reduce conflict for TANTQUE resolved as shift
  ! shift/reduce conflict for SI resolved as shift
  ! shift/reduce conflict for IDENTIFIANT resolved as shift
  ! shift/reduce conflict for ECRIRE resolved as shift
  ! shift/reduce conflict for BOOLEEN resolved as shift
  ! shift/reduce conflict for ENT resolved as shift
    }               shift and go to state 94
    SINON           shift and go to state 11
    TANTQUE         shift and go to state 13
    SI              shift and go to state 12
    IDENTIFIANT     shift and go to state 14
    ECRIRE          shift and go to state 16
    BOOLEEN         shift and go to state 17
    ENT             shift and go to state 18

    suite_sinosi                   shift and go to state 5
    instruction                    shift and go to state 19
    boucle                         shift and go to state 6
    condition                      shift and go to state 7
    affectation                    shift and go to state 8
    declaration                    shift and go to state 9
    ecrire                         shift and go to state 10
    type                           shift and go to state 15

state 92

    (26) boucle -> TANTQUE ( expr ) { listeInstructions . }
    (3) listeInstructions -> listeInstructions . instruction
    (5) instruction -> . suite_sinosi
    (6) instruction -> . boucle
    (7) instruction -> . condition
    (8) instruction -> . affectation
    (9) instruction -> . declaration
    (10) instruction -> . ecrire
    (23) suite_sinosi -> .
    (24) suite_sinosi -> . SINON SI ( expr ) { listeInstructions } suite_sinosi
    (25) suite_sinosi -> . SINON { listeInstructions }
    (26) boucle -> . TANTQUE ( expr ) { listeInstructions }
    (22) condition -> . SI ( expr ) { listeInstructions } suite_sinosi
    (21) affectation -> . IDENTIFIANT = expr ;
    (20) declaration -> . type IDENTIFIANT = expr ;
    (11) ecrire -> . ECRIRE ( expr ) ;
    (18) type -> . BOOLEEN
    (19) type -> . ENT
  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for SINON resolved as shift
  ! shift/reduce conflict for TANTQUE resolved as shift
  ! shift/reduce conflict for SI resolved as shift
  ! shift/reduce conflict for IDENTIFIANT resolved as shift
  ! shift/reduce conflict for ECRIRE resolved as shift
  ! shift/reduce conflict for BOOLEEN resolved as shift
  ! shift/reduce conflict for ENT resolved as shift
    }               shift and go to state 95
    SINON           shift and go to state 11
    TANTQUE         shift and go to state 13
    SI              shift and go to state 12
    IDENTIFIANT     shift and go to state 14
    ECRIRE          shift and go to state 16
    BOOLEEN         shift and go to state 17
    ENT             shift and go to state 18

    instruction                    shift and go to state 19
    suite_sinosi                   shift and go to state 5
    boucle                         shift and go to state 6
    condition                      shift and go to state 7
    affectation                    shift and go to state 8
    declaration                    shift and go to state 9
    ecrire                         shift and go to state 10
    type                           shift and go to state 15

state 93

    (24) suite_sinosi -> SINON SI ( expr ) { listeInstructions . } suite_sinosi
    (3) listeInstructions -> listeInstructions . instruction
    (5) instruction -> . suite_sinosi
    (6) instruction -> . boucle
    (7) instruction -> . condition
    (8) instruction -> . affectation
    (9) instruction -> . declaration
    (10) instruction -> . ecrire
    (23) suite_sinosi -> .
    (24) suite_sinosi -> . SINON SI ( expr ) { listeInstructions } suite_sinosi
    (25) suite_sinosi -> . SINON { listeInstructions }
    (26) boucle -> . TANTQUE ( expr ) { listeInstructions }
    (22) condition -> . SI ( expr ) { listeInstructions } suite_sinosi
    (21) affectation -> . IDENTIFIANT = expr ;
    (20) declaration -> . type IDENTIFIANT = expr ;
    (11) ecrire -> . ECRIRE ( expr ) ;
    (18) type -> . BOOLEEN
    (19) type -> . ENT
  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for SINON resolved as shift
  ! shift/reduce conflict for TANTQUE resolved as shift
  ! shift/reduce conflict for SI resolved as shift
  ! shift/reduce conflict for IDENTIFIANT resolved as shift
  ! shift/reduce conflict for ECRIRE resolved as shift
  ! shift/reduce conflict for BOOLEEN resolved as shift
  ! shift/reduce conflict for ENT resolved as shift
    }               shift and go to state 96
    SINON           shift and go to state 11
    TANTQUE         shift and go to state 13
    SI              shift and go to state 12
    IDENTIFIANT     shift and go to state 14
    ECRIRE          shift and go to state 16
    BOOLEEN         shift and go to state 17
    ENT             shift and go to state 18

    suite_sinosi                   shift and go to state 5
    instruction                    shift and go to state 19
    boucle                         shift and go to state 6
    condition                      shift and go to state 7
    affectation                    shift and go to state 8
    declaration                    shift and go to state 9
    ecrire                         shift and go to state 10
    type                           shift and go to state 15

state 94

    (22) condition -> SI ( expr ) { listeInstructions } . suite_sinosi
    (23) suite_sinosi -> .
    (24) suite_sinosi -> . SINON SI ( expr ) { listeInstructions } suite_sinosi
    (25) suite_sinosi -> . SINON { listeInstructions }
  ! shift/reduce conflict for SINON resolved as shift
    TANTQUE         reduce using rule 23 (suite_sinosi -> .)
    SI              reduce using rule 23 (suite_sinosi -> .)
    IDENTIFIANT     reduce using rule 23 (suite_sinosi -> .)
    ECRIRE          reduce using rule 23 (suite_sinosi -> .)
    BOOLEEN         reduce using rule 23 (suite_sinosi -> .)
    ENT             reduce using rule 23 (suite_sinosi -> .)
    $end            reduce using rule 23 (suite_sinosi -> .)
    }               reduce using rule 23 (suite_sinosi -> .)
    SINON           shift and go to state 11

    suite_sinosi                   shift and go to state 97

state 95

    (26) boucle -> TANTQUE ( expr ) { listeInstructions } .
    SINON           reduce using rule 26 (boucle -> TANTQUE ( expr ) { listeInstructions } .)
    TANTQUE         reduce using rule 26 (boucle -> TANTQUE ( expr ) { listeInstructions } .)
    SI              reduce using rule 26 (boucle -> TANTQUE ( expr ) { listeInstructions } .)
    IDENTIFIANT     reduce using rule 26 (boucle -> TANTQUE ( expr ) { listeInstructions } .)
    ECRIRE          reduce using rule 26 (boucle -> TANTQUE ( expr ) { listeInstructions } .)
    BOOLEEN         reduce using rule 26 (boucle -> TANTQUE ( expr ) { listeInstructions } .)
    ENT             reduce using rule 26 (boucle -> TANTQUE ( expr ) { listeInstructions } .)
    $end            reduce using rule 26 (boucle -> TANTQUE ( expr ) { listeInstructions } .)
    }               reduce using rule 26 (boucle -> TANTQUE ( expr ) { listeInstructions } .)


state 96

    (24) suite_sinosi -> SINON SI ( expr ) { listeInstructions } . suite_sinosi
    (23) suite_sinosi -> .
    (24) suite_sinosi -> . SINON SI ( expr ) { listeInstructions } suite_sinosi
    (25) suite_sinosi -> . SINON { listeInstructions }
  ! shift/reduce conflict for SINON resolved as shift
    TANTQUE         reduce using rule 23 (suite_sinosi -> .)
    SI              reduce using rule 23 (suite_sinosi -> .)
    IDENTIFIANT     reduce using rule 23 (suite_sinosi -> .)
    ECRIRE          reduce using rule 23 (suite_sinosi -> .)
    BOOLEEN         reduce using rule 23 (suite_sinosi -> .)
    ENT             reduce using rule 23 (suite_sinosi -> .)
    $end            reduce using rule 23 (suite_sinosi -> .)
    }               reduce using rule 23 (suite_sinosi -> .)
    SINON           shift and go to state 11

    suite_sinosi                   shift and go to state 98

state 97

    (22) condition -> SI ( expr ) { listeInstructions } suite_sinosi .
    SINON           reduce using rule 22 (condition -> SI ( expr ) { listeInstructions } suite_sinosi .)
    TANTQUE         reduce using rule 22 (condition -> SI ( expr ) { listeInstructions } suite_sinosi .)
    SI              reduce using rule 22 (condition -> SI ( expr ) { listeInstructions } suite_sinosi .)
    IDENTIFIANT     reduce using rule 22 (condition -> SI ( expr ) { listeInstructions } suite_sinosi .)
    ECRIRE          reduce using rule 22 (condition -> SI ( expr ) { listeInstructions } suite_sinosi .)
    BOOLEEN         reduce using rule 22 (condition -> SI ( expr ) { listeInstructions } suite_sinosi .)
    ENT             reduce using rule 22 (condition -> SI ( expr ) { listeInstructions } suite_sinosi .)
    $end            reduce using rule 22 (condition -> SI ( expr ) { listeInstructions } suite_sinosi .)
    }               reduce using rule 22 (condition -> SI ( expr ) { listeInstructions } suite_sinosi .)


state 98

    (24) suite_sinosi -> SINON SI ( expr ) { listeInstructions } suite_sinosi .
    SINON           reduce using rule 24 (suite_sinosi -> SINON SI ( expr ) { listeInstructions } suite_sinosi .)
    TANTQUE         reduce using rule 24 (suite_sinosi -> SINON SI ( expr ) { listeInstructions } suite_sinosi .)
    SI              reduce using rule 24 (suite_sinosi -> SINON SI ( expr ) { listeInstructions } suite_sinosi .)
    IDENTIFIANT     reduce using rule 24 (suite_sinosi -> SINON SI ( expr ) { listeInstructions } suite_sinosi .)
    ECRIRE          reduce using rule 24 (suite_sinosi -> SINON SI ( expr ) { listeInstructions } suite_sinosi .)
    BOOLEEN         reduce using rule 24 (suite_sinosi -> SINON SI ( expr ) { listeInstructions } suite_sinosi .)
    ENT             reduce using rule 24 (suite_sinosi -> SINON SI ( expr ) { listeInstructions } suite_sinosi .)
    $end            reduce using rule 24 (suite_sinosi -> SINON SI ( expr ) { listeInstructions } suite_sinosi .)
    }               reduce using rule 24 (suite_sinosi -> SINON SI ( expr ) { listeInstructions } suite_sinosi .)


Conflicts:

shift/reduce conflict for SINON in state 0 resolved as shift
shift/reduce conflict for TANTQUE in state 0 resolved as shift
shift/reduce conflict for SI in state 0 resolved as shift
shift/reduce conflict for IDENTIFIANT in state 0 resolved as shift
shift/reduce conflict for ECRIRE in state 0 resolved as shift
shift/reduce conflict for BOOLEEN in state 0 resolved as shift
shift/reduce conflict for ENT in state 0 resolved as shift
shift/reduce conflict for SINON in state 3 resolved as shift
shift/reduce conflict for TANTQUE in state 3 resolved as shift
shift/reduce conflict for SI in state 3 resolved as shift
shift/reduce conflict for IDENTIFIANT in state 3 resolved as shift
shift/reduce conflict for ECRIRE in state 3 resolved as shift
shift/reduce conflict for BOOLEEN in state 3 resolved as shift
shift/reduce conflict for ENT in state 3 resolved as shift
shift/reduce conflict for SINON in state 21 resolved as shift
shift/reduce conflict for TANTQUE in state 21 resolved as shift
shift/reduce conflict for SI in state 21 resolved as shift
shift/reduce conflict for IDENTIFIANT in state 21 resolved as shift
shift/reduce conflict for ECRIRE in state 21 resolved as shift
shift/reduce conflict for BOOLEEN in state 21 resolved as shift
shift/reduce conflict for ENT in state 21 resolved as shift
shift/reduce conflict for } in state 28 resolved as shift
shift/reduce conflict for SINON in state 28 resolved as shift
shift/reduce conflict for TANTQUE in state 28 resolved as shift
shift/reduce conflict for SI in state 28 resolved as shift
shift/reduce conflict for IDENTIFIANT in state 28 resolved as shift
shift/reduce conflict for ECRIRE in state 28 resolved as shift
shift/reduce conflict for BOOLEEN in state 28 resolved as shift
shift/reduce conflict for ENT in state 28 resolved as shift
shift/reduce conflict for MODULO in state 36 resolved as shift
shift/reduce conflict for SINON in state 72 resolved as shift
shift/reduce conflict for TANTQUE in state 72 resolved as shift
shift/reduce conflict for SI in state 72 resolved as shift
shift/reduce conflict for IDENTIFIANT in state 72 resolved as shift
shift/reduce conflict for ECRIRE in state 72 resolved as shift
shift/reduce conflict for BOOLEEN in state 72 resolved as shift
shift/reduce conflict for ENT in state 72 resolved as shift
shift/reduce conflict for SINON in state 87 resolved as shift
shift/reduce conflict for TANTQUE in state 87 resolved as shift
shift/reduce conflict for SI in state 87 resolved as shift
shift/reduce conflict for IDENTIFIANT in state 87 resolved as shift
shift/reduce conflict for ECRIRE in state 87 resolved as shift
shift/reduce conflict for BOOLEEN in state 87 resolved as shift
shift/reduce conflict for ENT in state 87 resolved as shift
shift/reduce conflict for SINON in state 90 resolved as shift
shift/reduce conflict for TANTQUE in state 90 resolved as shift
shift/reduce conflict for SI in state 90 resolved as shift
shift/reduce conflict for IDENTIFIANT in state 90 resolved as shift
shift/reduce conflict for ECRIRE in state 90 resolved as shift
shift/reduce conflict for BOOLEEN in state 90 resolved as shift
shift/reduce conflict for ENT in state 90 resolved as shift
shift/reduce conflict for } in state 91 resolved as shift
shift/reduce conflict for SINON in state 91 resolved as shift
shift/reduce conflict for TANTQUE in state 91 resolved as shift
shift/reduce conflict for SI in state 91 resolved as shift
shift/reduce conflict for IDENTIFIANT in state 91 resolved as shift
shift/reduce conflict for ECRIRE in state 91 resolved as shift
shift/reduce conflict for BOOLEEN in state 91 resolved as shift
shift/reduce conflict for ENT in state 91 resolved as shift
shift/reduce conflict for } in state 92 resolved as shift
shift/reduce conflict for SINON in state 92 resolved as shift
shift/reduce conflict for TANTQUE in state 92 resolved as shift
shift/reduce conflict for SI in state 92 resolved as shift
shift/reduce conflict for IDENTIFIANT in state 92 resolved as shift
shift/reduce conflict for ECRIRE in state 92 resolved as shift
shift/reduce conflict for BOOLEEN in state 92 resolved as shift
shift/reduce conflict for ENT in state 92 resolved as shift
shift/reduce conflict for } in state 93 resolved as shift
shift/reduce conflict for SINON in state 93 resolved as shift
shift/reduce conflict for TANTQUE in state 93 resolved as shift
shift/reduce conflict for SI in state 93 resolved as shift
shift/reduce conflict for IDENTIFIANT in state 93 resolved as shift
shift/reduce conflict for ECRIRE in state 93 resolved as shift
shift/reduce conflict for BOOLEEN in state 93 resolved as shift
shift/reduce conflict for ENT in state 93 resolved as shift
shift/reduce conflict for SINON in state 94 resolved as shift
shift/reduce conflict for SINON in state 96 resolved as shift
reduce/reduce conflict in state 3 resolved using rule prog -> listeInstructions
rejected rule (suite_sinosi -> <empty>) in state 3
reduce/reduce conflict in state 59 resolved using rule factor -> IDENTIFIANT
rejected rule (expr -> NON IDENTIFIANT) in state 59
reduce/reduce conflict in state 60 resolved using rule factor -> BOOLEEN_LITERAL
rejected rule (expr -> NON BOOLEEN_LITERAL) in state 60
Rule (expr -> NON IDENTIFIANT) is never reduced
Rule (expr -> NON BOOLEEN_LITERAL) is never reduced