Grammar:

Rule 0     S' -> prog
Rule 1     prog -> listeInstructions
Rule 2     listeInstructions -> instruction listeInstructions
Rule 3     listeInstructions -> instruction
Rule 4     instruction -> ecrire
Rule 5     ecrire -> ECRIRE ( expr ) ;
Rule 6     expr -> term
Rule 7     expr -> expr MINUS term
Rule 8     expr -> expr PLUS term
Rule 9     term -> factor
Rule 10    term -> term DIV factor
Rule 11    term -> term MULT factor
Rule 12    factor -> ( expr )
Rule 13    factor -> IDENTIFIANT
Rule 14    factor -> ENTIER

Unused terminals:

    INFERIEUR_OU_EGAL
    ENT

Terminals, with rules where they appear:

(                    : 5 12
)                    : 5 12
;                    : 5
DIV                  : 10
ECRIRE               : 5
ENT                  : 
ENTIER               : 14
IDENTIFIANT          : 13
INFERIEUR_OU_EGAL    : 
MINUS                : 7
MULT                 : 11
PLUS                 : 8
error                : 

Nonterminals, with rules where they appear:

ecrire               : 4
expr                 : 5 7 8 12
factor               : 9 10 11
instruction          : 2 3
listeInstructions    : 1 2
prog                 : 0
term                 : 6 7 8 10 11


state 0

    (0) S' -> . prog
    (1) prog -> . listeInstructions
    (2) listeInstructions -> . instruction listeInstructions
    (3) listeInstructions -> . instruction
    (4) instruction -> . ecrire
    (5) ecrire -> . ECRIRE ( expr ) ;
    ECRIRE          shift and go to state 5

    prog                           shift and go to state 1
    listeInstructions              shift and go to state 2
    instruction                    shift and go to state 3
    ecrire                         shift and go to state 4

state 1

    (0) S' -> prog .


state 2

    (1) prog -> listeInstructions .
    $end            reduce using rule 1 (prog -> listeInstructions .)


state 3

    (2) listeInstructions -> instruction . listeInstructions
    (3) listeInstructions -> instruction .
    (2) listeInstructions -> . instruction listeInstructions
    (3) listeInstructions -> . instruction
    (4) instruction -> . ecrire
    (5) ecrire -> . ECRIRE ( expr ) ;
    $end            reduce using rule 3 (listeInstructions -> instruction .)
    ECRIRE          shift and go to state 5

    instruction                    shift and go to state 3
    listeInstructions              shift and go to state 6
    ecrire                         shift and go to state 4

state 4

    (4) instruction -> ecrire .
    ECRIRE          reduce using rule 4 (instruction -> ecrire .)
    $end            reduce using rule 4 (instruction -> ecrire .)


state 5

    (5) ecrire -> ECRIRE . ( expr ) ;
    (               shift and go to state 7


state 6

    (2) listeInstructions -> instruction listeInstructions .
    $end            reduce using rule 2 (listeInstructions -> instruction listeInstructions .)


state 7

    (5) ecrire -> ECRIRE ( . expr ) ;
    (6) expr -> . term
    (7) expr -> . expr MINUS term
    (8) expr -> . expr PLUS term
    (9) term -> . factor
    (10) term -> . term DIV factor
    (11) term -> . term MULT factor
    (12) factor -> . ( expr )
    (13) factor -> . IDENTIFIANT
    (14) factor -> . ENTIER
    (               shift and go to state 8
    IDENTIFIANT     shift and go to state 12
    ENTIER          shift and go to state 13

    expr                           shift and go to state 9
    term                           shift and go to state 10
    factor                         shift and go to state 11

state 8

    (12) factor -> ( . expr )
    (6) expr -> . term
    (7) expr -> . expr MINUS term
    (8) expr -> . expr PLUS term
    (9) term -> . factor
    (10) term -> . term DIV factor
    (11) term -> . term MULT factor
    (12) factor -> . ( expr )
    (13) factor -> . IDENTIFIANT
    (14) factor -> . ENTIER
    (               shift and go to state 8
    IDENTIFIANT     shift and go to state 12
    ENTIER          shift and go to state 13

    expr                           shift and go to state 14
    term                           shift and go to state 10
    factor                         shift and go to state 11

state 9

    (5) ecrire -> ECRIRE ( expr . ) ;
    (7) expr -> expr . MINUS term
    (8) expr -> expr . PLUS term
    )               shift and go to state 15
    MINUS           shift and go to state 16
    PLUS            shift and go to state 17


state 10

    (6) expr -> term .
    (10) term -> term . DIV factor
    (11) term -> term . MULT factor
    )               reduce using rule 6 (expr -> term .)
    MINUS           reduce using rule 6 (expr -> term .)
    PLUS            reduce using rule 6 (expr -> term .)
    DIV             shift and go to state 18
    MULT            shift and go to state 19


state 11

    (9) term -> factor .
    DIV             reduce using rule 9 (term -> factor .)
    MULT            reduce using rule 9 (term -> factor .)
    )               reduce using rule 9 (term -> factor .)
    MINUS           reduce using rule 9 (term -> factor .)
    PLUS            reduce using rule 9 (term -> factor .)


state 12

    (13) factor -> IDENTIFIANT .
    DIV             reduce using rule 13 (factor -> IDENTIFIANT .)
    MULT            reduce using rule 13 (factor -> IDENTIFIANT .)
    )               reduce using rule 13 (factor -> IDENTIFIANT .)
    MINUS           reduce using rule 13 (factor -> IDENTIFIANT .)
    PLUS            reduce using rule 13 (factor -> IDENTIFIANT .)


state 13

    (14) factor -> ENTIER .
    DIV             reduce using rule 14 (factor -> ENTIER .)
    MULT            reduce using rule 14 (factor -> ENTIER .)
    )               reduce using rule 14 (factor -> ENTIER .)
    MINUS           reduce using rule 14 (factor -> ENTIER .)
    PLUS            reduce using rule 14 (factor -> ENTIER .)


state 14

    (12) factor -> ( expr . )
    (7) expr -> expr . MINUS term
    (8) expr -> expr . PLUS term
    )               shift and go to state 20
    MINUS           shift and go to state 16
    PLUS            shift and go to state 17


state 15

    (5) ecrire -> ECRIRE ( expr ) . ;
    ;               shift and go to state 21


state 16

    (7) expr -> expr MINUS . term
    (9) term -> . factor
    (10) term -> . term DIV factor
    (11) term -> . term MULT factor
    (12) factor -> . ( expr )
    (13) factor -> . IDENTIFIANT
    (14) factor -> . ENTIER
    (               shift and go to state 8
    IDENTIFIANT     shift and go to state 12
    ENTIER          shift and go to state 13

    term                           shift and go to state 22
    factor                         shift and go to state 11

state 17

    (8) expr -> expr PLUS . term
    (9) term -> . factor
    (10) term -> . term DIV factor
    (11) term -> . term MULT factor
    (12) factor -> . ( expr )
    (13) factor -> . IDENTIFIANT
    (14) factor -> . ENTIER
    (               shift and go to state 8
    IDENTIFIANT     shift and go to state 12
    ENTIER          shift and go to state 13

    term                           shift and go to state 23
    factor                         shift and go to state 11

state 18

    (10) term -> term DIV . factor
    (12) factor -> . ( expr )
    (13) factor -> . IDENTIFIANT
    (14) factor -> . ENTIER
    (               shift and go to state 8
    IDENTIFIANT     shift and go to state 12
    ENTIER          shift and go to state 13

    factor                         shift and go to state 24

state 19

    (11) term -> term MULT . factor
    (12) factor -> . ( expr )
    (13) factor -> . IDENTIFIANT
    (14) factor -> . ENTIER
    (               shift and go to state 8
    IDENTIFIANT     shift and go to state 12
    ENTIER          shift and go to state 13

    factor                         shift and go to state 25

state 20

    (12) factor -> ( expr ) .
    DIV             reduce using rule 12 (factor -> ( expr ) .)
    MULT            reduce using rule 12 (factor -> ( expr ) .)
    )               reduce using rule 12 (factor -> ( expr ) .)
    MINUS           reduce using rule 12 (factor -> ( expr ) .)
    PLUS            reduce using rule 12 (factor -> ( expr ) .)


state 21

    (5) ecrire -> ECRIRE ( expr ) ; .
    ECRIRE          reduce using rule 5 (ecrire -> ECRIRE ( expr ) ; .)
    $end            reduce using rule 5 (ecrire -> ECRIRE ( expr ) ; .)


state 22

    (7) expr -> expr MINUS term .
    (10) term -> term . DIV factor
    (11) term -> term . MULT factor
    )               reduce using rule 7 (expr -> expr MINUS term .)
    MINUS           reduce using rule 7 (expr -> expr MINUS term .)
    PLUS            reduce using rule 7 (expr -> expr MINUS term .)
    DIV             shift and go to state 18
    MULT            shift and go to state 19


state 23

    (8) expr -> expr PLUS term .
    (10) term -> term . DIV factor
    (11) term -> term . MULT factor
    )               reduce using rule 8 (expr -> expr PLUS term .)
    MINUS           reduce using rule 8 (expr -> expr PLUS term .)
    PLUS            reduce using rule 8 (expr -> expr PLUS term .)
    DIV             shift and go to state 18
    MULT            shift and go to state 19


state 24

    (10) term -> term DIV factor .
    DIV             reduce using rule 10 (term -> term DIV factor .)
    MULT            reduce using rule 10 (term -> term DIV factor .)
    )               reduce using rule 10 (term -> term DIV factor .)
    MINUS           reduce using rule 10 (term -> term DIV factor .)
    PLUS            reduce using rule 10 (term -> term DIV factor .)


state 25

    (11) term -> term MULT factor .
    DIV             reduce using rule 11 (term -> term MULT factor .)
    MULT            reduce using rule 11 (term -> term MULT factor .)
    )               reduce using rule 11 (term -> term MULT factor .)
    MINUS           reduce using rule 11 (term -> term MULT factor .)
    PLUS            reduce using rule 11 (term -> term MULT factor .)
